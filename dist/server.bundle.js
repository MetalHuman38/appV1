(()=>{"use strict";var e,r,o,t,s,i={469:(e,r,o)=>{o.d(r,{_:()=>s});var t=o(613);const s=(0,o(546).load)({PORT:Number,NODE_ENV:["production","development"],MORGAN:["combined","dev","tiny"],APP_NAME:String,BASE_URL:String,BASE64_ENCODED:Buffer,TRACING:Boolean,EXTRA:String,RARE_LIMIT_TIME:Number,RARE_LIMIT_WINDOW_MS:Number,MAX:Number,RARE_LIMIT_MESSAGE:String,RARE_LIMIT_CODE:Number,TRUST_PROXY:Boolean,NUMBER_OF_PROXIES:Number,IDLE_TIMEOUT:Number,COMPRESSION_LEVEL:Number,COMPRESSION_THRESHOLD:Number,ERROR_TIMEOUT:Number,RESPONSE_STATUS:String,RESPONSE_MESSAGE:String,RESPONSE_CODE:Number,RESPONSE_ERROR_CODE:Number,RESPONSE_ERROR_MESSAGE:String,RESPONSE_SERVER_ERROR:String,RESPONSE_ERROR_STATUS:String,RESPONSE_ERROR_DATA:String,RESPONSE_ERROR_STACK:String,RESPONSE_ERROR_NAME:String}),{APP_NAME:i,TRACING:n,PORT:u,MORGAN:E,NODE_ENV:l,BASE_URL:c,BASE64_ENCODED:a,EXTRA:R,RARE_LIMIT_TIME:S,RARE_LIMIT_WINDOW_MS:_,RESPONSE_ERROR_CODE:d,MAX:p,RARE_LIMIT_MESSAGE:O,RARE_LIMIT_CODE:m,TRUST_PROXY:b,NUMBER_OF_PROXIES:N,IDLE_TIMEOUT:T,COMPRESSION_LEVEL:f,COMPRESSION_THRESHOLD:h,ERROR_TIMEOUT:x}=s;if(500===d)throw new Error("Internal Server Error! No env file found!");if(t.strict.ok(n,"Tracing should be true"),t.strict.ok(8081===u,"Port should be 8081"),t.strict.ok("production"===l,"Node environment should be production"),t.strict.ok("http://localhost:8081"===c,"Base URL should be correct"),t.strict.ok(a.equals(Buffer.from("ðŸš€")),"Base64 encoded value should match"),t.strict.ok("true"===R,"Extra should be true"),t.strict.ok(9e5===S,"Rate limit time should be 15m"),t.strict.ok(9e5===_,"Rate limit window should be 15m"),t.strict.ok(100===p,"Max should be 100"),t.strict.ok(O,"Too many requests, please try again later"),t.strict.ok(429===m,"Rate limit code should be 429"),t.strict.ok(b,"Trust proxy should be true initially"),t.strict.ok(1===N,"Number of proxies should be 1"),t.strict.ok(48e4===T,"Idle timeout should be 8m"),t.strict.ok(6===f,"Compression level should be 6"),t.strict.ok(1024===h,"Compression threshold should be 1024"),t.strict.ok(5e3===x,"Error timeout should be 5s"),!/^[a-zA-Z0-9-.]+$/.test(i))throw new Error(`Invalid APP_NAME: ${i}`)},423:e=>{e.exports=require("@sequelize/core")},520:e=>{e.exports=require("@sequelize/mariadb")},486:e=>{e.exports=require("bcrypt")},268:e=>{e.exports=require("body-parser")},898:e=>{e.exports=require("cookie-parser")},577:e=>{e.exports=require("cors")},818:e=>{e.exports=require("dotenv")},252:e=>{e.exports=require("express")},763:e=>{e.exports=require("express-rate-limit")},525:e=>{e.exports=require("helmet")},829:e=>{e.exports=require("jsonwebtoken")},96:e=>{e.exports=require("morgan")},31:e=>{e.exports=require("sequelize")},546:e=>{e.exports=require("ts-dotenv")},613:e=>{e.exports=require("assert")},982:e=>{e.exports=require("crypto")},896:e=>{e.exports=require("fs")},643:e=>{e.exports=require("node:fs")},760:e=>{e.exports=require("node:path")},708:e=>{e.exports=require("node:process")},136:e=>{e.exports=require("node:url")}},n={};function u(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return i[e](o,o.exports,u),o.exports}u.m=i,e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",r="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",o="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",t=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},u.a=(s,i,n)=>{var u;n&&((u=[]).d=-1);var E,l,c,a=new Set,R=s.exports,S=new Promise(((e,r)=>{c=r,l=e}));S[r]=R,S[e]=e=>(u&&e(u),a.forEach(e),S.catch((e=>{}))),s.exports=S,i((s=>{var i;E=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[e])return s;if(s.then){var i=[];i.d=0,s.then((e=>{n[r]=e,t(i)}),(e=>{n[o]=e,t(i)}));var n={};return n[e]=e=>e(i),n}}var u={};return u[e]=e=>{},u[r]=s,u})))(s);var n=()=>E.map((e=>{if(e[o])throw e[o];return e[r]})),l=new Promise((r=>{(i=()=>r(n)).r=0;var o=e=>e!==u&&!a.has(e)&&(a.add(e),e&&!e.d&&(i.r++,e.push(i)));E.map((r=>r[e](o)))}));return i.r?l:n()}),(e=>(e?c(S[o]=e):l(R),t(u)))),u&&u.d<0&&(u.d=0)},u.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return u.d(r,{a:r}),r},u.d=(e,r)=>{for(var o in r)u.o(r,o)&&!u.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},u.f={},u.e=e=>Promise.all(Object.keys(u.f).reduce(((r,o)=>(u.f[o](e,r),r)),[])),u.u=e=>e+".bundle.js",u.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s={750:1},u.f.require=(e,r)=>{s[e]||(e=>{var r=e.modules,o=e.ids,t=e.runtime;for(var i in r)u.o(r,i)&&(u.m[i]=r[i]);t&&t(u);for(var n=0;n<o.length;n++)s[o[n]]=1})(require("./"+u.u(e)))};var E=u(252),l=u.n(E);const c=require("node:http");var a=u.n(c);const R=require("node:async_hooks");var S=u(469);const _=require("compression");var d=u.n(_),p=u(708),O=u.n(p),m=u(577),b=u.n(m);u(818).config(),async function(){const e=l()();e.use(b()({origin:"http://localhost:8080",credentials:!0})),(await u.e(545).then(u.bind(u,545))).default({app:e});const r=a().createServer(e),o=new R.AsyncLocalStorage;function t(e){const r=o.getStore();console.log(`${void 0!==r?r:"-"} ${e}`)}let s=0;r.on("connection",(e=>{const r=s++;o.run(r,(()=>{t("Client connected to server!"),e.on("close",(()=>{t("Client disconnected from server!")}))}))})),r.listen(S._.PORT,"127.0.0.1",(()=>{console.log(`Server listening on port ${S._.PORT}`)})),e.use(d()({filter:(e,r)=>!e.headers["x-no-compression"]&&d().filter(e,r),level:S._.COMPRESSION_LEVEL||6,threshold:S._.COMPRESSION_THRESHOLD||1024}));const i=S._.IDLE_TIMEOUT||48e4;let n=setTimeout((()=>{r.close((()=>{console.log("Server closed due to idle time out! Restarting..."),O().exit(0)}))}),i);e.use(((e,o,t)=>{clearTimeout(n),n=setTimeout((()=>{r.close((()=>{console.log("Cleared Time out! Restarting..."),O().exit(0)}))}),i),t()})),O().on("uncaughtExceptionMonitor",((e,r)=>{console.log("Uncaught Exception:",e,"Origin:",r),O().exit(1)})),r.on("error",(e=>{console.error(e),O().exit(1)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,