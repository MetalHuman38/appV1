(()=>{"use strict";var e,r,o,t,s,n={9469:(e,r,o)=>{o.d(r,{_:()=>s});var t=o(2613);const s=(0,o(7546).load)({PORT:Number,NODE_ENV:["production","development"],MORGAN:["combined","dev","tiny"],APP_NAME:String,BASE_URL:String,BASE64_ENCODED:Buffer,TRACING:Boolean,EXTRA:String,RARE_LIMIT_TIME:Number,RARE_LIMIT_WINDOW_MS:Number,MAX:Number,RARE_LIMIT_MESSAGE:String,RARE_LIMIT_CODE:Number,TRUST_PROXY:Boolean,NUMBER_OF_PROXIES:Number,IDLE_TIMEOUT:Number,COMPRESSION_LEVEL:Number,COMPRESSION_THRESHOLD:Number,ERROR_TIMEOUT:Number,RESPONSE_STATUS:String,RESPONSE_MESSAGE:String,RESPONSE_CODE:Number,RESPONSE_ERROR_CODE:Number,RESPONSE_ERROR_MESSAGE:String,RESPONSE_SERVER_ERROR:String,RESPONSE_ERROR_STATUS:String,RESPONSE_ERROR_DATA:String,RESPONSE_ERROR_STACK:String,RESPONSE_ERROR_NAME:String}),{APP_NAME:n,TRACING:i,PORT:u,MORGAN:l,NODE_ENV:a,BASE_URL:c,BASE64_ENCODED:E,EXTRA:d,RARE_LIMIT_TIME:R,RARE_LIMIT_WINDOW_MS:_,RESPONSE_ERROR_CODE:p,MAX:S,RARE_LIMIT_MESSAGE:m,RARE_LIMIT_CODE:O,TRUST_PROXY:b,NUMBER_OF_PROXIES:h,IDLE_TIMEOUT:f,COMPRESSION_LEVEL:g,COMPRESSION_THRESHOLD:k,ERROR_TIMEOUT:N}=s;if(500===p)throw new Error("Internal Server Error! No env file found!");if(t.strict.ok(i,"Tracing should be true"),t.strict.ok(8081===u,"Port should be 8081"),t.strict.ok("production"===a,"Node environment should be production"),t.strict.ok("http://localhost:8081"===c,"Base URL should be correct"),t.strict.ok(E.equals(Buffer.from("ðŸš€")),"Base64 encoded value should match"),t.strict.ok("true"===d,"Extra should be true"),t.strict.ok(9e5===R,"Rate limit time should be 15m"),t.strict.ok(9e5===_,"Rate limit window should be 15m"),t.strict.ok(100===S,"Max should be 100"),t.strict.ok(m,"Too many requests, please try again later"),t.strict.ok(429===O,"Rate limit code should be 429"),t.strict.ok(b,"Trust proxy should be true initially"),t.strict.ok(1===h,"Number of proxies should be 1"),t.strict.ok(48e4===f,"Idle timeout should be 8m"),t.strict.ok(9===g,"Compression level should be 9"),t.strict.ok(1024===k,"Compression threshold should be 1024"),t.strict.ok(5e3===N,"Error timeout should be 5s"),!/^[a-zA-Z0-9-.]+$/.test(n))throw new Error(`Invalid APP_NAME: ${n}`)},423:e=>{e.exports=require("@sequelize/core")},5520:e=>{e.exports=require("@sequelize/mariadb")},5486:e=>{e.exports=require("bcrypt")},3268:e=>{e.exports=require("body-parser")},6898:e=>{e.exports=require("cookie-parser")},8577:e=>{e.exports=require("cors")},818:e=>{e.exports=require("dotenv")},4469:e=>{e.exports=require("dotenv/config")},7252:e=>{e.exports=require("express")},1763:e=>{e.exports=require("express-rate-limit")},2525:e=>{e.exports=require("helmet")},829:e=>{e.exports=require("jsonwebtoken")},2096:e=>{e.exports=require("morgan")},8461:e=>{e.exports=require("multer")},9031:e=>{e.exports=require("sequelize")},7546:e=>{e.exports=require("ts-dotenv")},7189:e=>{e.exports=require("validate-image-type")},2613:e=>{e.exports=require("assert")},6982:e=>{e.exports=require("crypto")},9896:e=>{e.exports=require("fs")},3024:e=>{e.exports=require("node:fs")},6760:e=>{e.exports=require("node:path")},643:e=>{e.exports=require("node:perf_hooks")},1708:e=>{e.exports=require("node:process")},3136:e=>{e.exports=require("node:url")},6928:e=>{e.exports=require("path")}},i={};function u(e){var r=i[e];if(void 0!==r)return r.exports;var o=i[e]={exports:{}};return n[e](o,o.exports,u),o.exports}u.m=n,e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",r="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",o="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",t=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},u.a=(s,n,i)=>{var u;i&&((u=[]).d=-1);var l,a,c,E=new Set,d=s.exports,R=new Promise(((e,r)=>{c=r,a=e}));R[r]=d,R[e]=e=>(u&&e(u),E.forEach(e),R.catch((e=>{}))),s.exports=R,n((s=>{var n;l=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[e])return s;if(s.then){var n=[];n.d=0,s.then((e=>{i[r]=e,t(n)}),(e=>{i[o]=e,t(n)}));var i={};return i[e]=e=>e(n),i}}var u={};return u[e]=e=>{},u[r]=s,u})))(s);var i=()=>l.map((e=>{if(e[o])throw e[o];return e[r]})),a=new Promise((r=>{(n=()=>r(i)).r=0;var o=e=>e!==u&&!E.has(e)&&(E.add(e),e&&!e.d&&(n.r++,e.push(n)));l.map((r=>r[e](o)))}));return n.r?a:i()}),(e=>(e?c(R[o]=e):a(d),t(u)))),u&&u.d<0&&(u.d=0)},u.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return u.d(r,{a:r}),r},u.d=(e,r)=>{for(var o in r)u.o(r,o)&&!u.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},u.f={},u.e=e=>Promise.all(Object.keys(u.f).reduce(((r,o)=>(u.f[o](e,r),r)),[])),u.u=e=>e+".bundle.js",u.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s={750:1},u.f.require=(e,r)=>{s[e]||(e=>{var r=e.modules,o=e.ids,t=e.runtime;for(var n in r)u.o(r,n)&&(u.m[n]=r[n]);t&&t(u);for(var i=0;i<o.length;i++)s[o[i]]=1})(require("./"+u.u(e)))};const l=require("compression");var a=u.n(l),c=u(8577),E=u.n(c),d=u(7252),R=u.n(d);const _=require("node:async_hooks"),p=require("node:http");var S=u.n(p),m=u(1708),O=u.n(m);const b=require("worker_threads");var h=u(9469);u(818).config(),async function(){const e=R()();async function r(){const e=new b.Worker("./four-worker.config.js",{workerData:{thread_count:4}});return new Promise(((r,o)=>{e.on("message",(e=>{r(e)})),e.on("error",(e=>{o(`Worker error: ${e}`)})),e.on("exit",(e=>{0!==e&&o(`Worker stopped with exit code ${e}`)}))}))}e.use(E()({origin:"http://localhost:8080",credentials:!0})),(await u.e(545).then(u.bind(u,1545))).default({app:e}),e.use("/heavy",((e,r)=>{const o=Array.from({length:1e6},(()=>Math.random()));let t=0;for(let e=0;e<o.length;e++)t+=o[e];r.send(`The result of the CPU = ${o} and total operation is: ${t}`)})),e.get("/non-blocking/",((e,r)=>{r.status(200).send("Non-blocking request")})),e.get("/blocking-worker",(async(e,o)=>{const t=Date.now();try{const e=await r();console.log(`Worker took ${Date.now()-t}ms to complete`),o.status(200).send(`Blocking worker: ${e}`)}catch(e){console.log(`Error in worker: ${e}`),o.status(500).send(`Blocking worker failed: ${e}`)}})),e.get("/blocking",(async(e,o)=>{const t=Date.now(),s=[];for(let e=0;e<4;e++)s.push(r());try{const e=await Promise.all(s),r=e[0]+e[1]+e[2]+e[3];console.log(`Workers took ${Date.now()-t}ms to complete`),o.status(200).send(`Blocking workers: ${r}`)}catch(e){console.log(`Error in worker: ${e}`),o.status(500).send(`Blocking workers failed: ${e}`)}}));const o=S().createServer(e),t=new _.AsyncLocalStorage;function s(e){const r=t.getStore();console.log(`${void 0!==r?r:"-"} ${e}`)}let n=0;o.on("connection",(e=>{const r=n++;t.run(r,(()=>{s("Client connected to server!!!"),e.on("close",(()=>{s("Client disconnected from server!!!")}))}))})),o.listen(h._.PORT,(()=>{console.log(`Server listening on port ${h._.PORT}`)})),e.use(a()({filter:(e,r)=>!e.headers["x-no-compression"]&&a().filter(e,r),level:h._.COMPRESSION_LEVEL||9,threshold:h._.COMPRESSION_THRESHOLD||1024}));const i=h._.IDLE_TIMEOUT||48e4;let l=setTimeout((()=>{o.close((()=>{console.log("Server closed due to idle time out! Restarting...."),O().exit(0)}))}),i);e.use(((e,r,t)=>{clearTimeout(l),l=setTimeout((()=>{o.close((()=>{console.log("Cleared Time out! Restarting...."),O().exit(0)}))}),i),t()})),O().on("uncaughtExceptionMonitor",((e,r)=>{console.log("Uncaught Exception:",e,"Origin:",r),O().exit(1)})),o.on("error",(e=>{console.error(e),O().exit(1)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,