"use strict";exports.id=545,exports.ids=[545],exports.modules={1976:(e,s,t)=>{t.d(s,{v:()=>l});var r=t(2613);const a=(0,t(7546).load)({CORS_ORIGIN:String,CORS_OPTIONS_SUCCESS_STATUS:Number,CORS_CREDENTIALS:Boolean,CORS_METHODS:String}),{CORS_ORIGIN:o,CORS_OPTIONS_SUCCESS_STATUS:n,CORS_CREDENTIALS:i,CORS_METHODS:c}=a;r.strict.ok(o,"CORS origin should be present"),r.strict.ok(n,"CORS options success status should be present"),r.strict.ok(i,"CORS credentials should be present"),r.strict.ok(c,"CORS methods should be present");const d={CORS_ORIGIN:o,CORS_OPTIONS_SUCCESS_STATUS:n,CORS_CREDENTIALS:i,CORS_METHODS:c};t(818).config();const l={origin:d.CORS_ORIGIN,methods:d.CORS_METHODS,credentials:d.CORS_CREDENTIALS,optionsSuccessStatus:d.CORS_OPTIONS_SUCCESS_STATUS}},3085:(e,s,t)=>{t.d(s,{L:()=>A});var r=t(2613);const a=(0,t(7546).load)({DB_HOST:String,DB_PORT:Number,DB_USER:String,DB_PASS:String,DB_NAME:String,DB_SOCKET_PATH:String,DB_SOCKET_TIMEOUT:Number,DB_COMPRESS:Boolean,DB_DEBUG:Boolean,DB_PERMIT_LOCAL_INFILE:Boolean,DB_TRACE:Boolean,DB_CHECK_DUPLICATE:Boolean,DB_SSL:Boolean,DB_SSL_CA:String,DB_SSL_KEY:String,DB_SSL_CERT:String,DB_CONNECTION_ATTRIBUTES:String,DB_CONNECTION_TIMEOUT:Number}),{DB_HOST:o,DB_PORT:n,DB_USER:i,DB_PASS:c,DB_NAME:d,DB_SOCKET_PATH:l,DB_SOCKET_TIMEOUT:u,DB_COMPRESS:g,DB_DEBUG:y,DB_PERMIT_LOCAL_INFILE:p,DB_TRACE:T,DB_CHECK_DUPLICATE:E,DB_SSL:m,DB_SSL_CA:h,DB_SSL_KEY:_,DB_SSL_CERT:f,DB_CONNECTION_ATTRIBUTES:w,DB_CONNECTION_TIMEOUT:S}=a;r.strict.ok(o,"Database host should be present"),r.strict.ok(n,"Database port should be present"),r.strict.ok(i,"Database user should be present"),r.strict.ok(c,"Database password should be present"),r.strict.ok(d,"Database name should be present");const A={DB_HOST:o,DB_PORT:n,DB_USER:i,DB_PASS:c,DB_NAME:d,DB_SOCKET_PATH:l,DB_SOCKET_TIMEOUT:u,DB_COMPRESS:g,DB_DEBUG:y,DB_PERMIT_LOCAL_INFILE:p,DB_TRACE:T,DB_CHECK_DUPLICATE:E,DB_CONNECTION_ATTRIBUTES:w,DB_CONNECTION_TIMEOUT:S,DB_SSL:m,DB_SSL_CA:h,DB_SSL_KEY:_,DB_SSL_CERT:f}},3101:(e,s,t)=>{t.d(s,{n:()=>m});var r=t(2613);const a=(0,t(7546).load)({JWT_SECRET:String,JWT_EXPIRES_IN:String,JWT_REFRESH_SECRET:String,JWT_REFRESH_EXPIRES_IN:String,JWT_REFRESH_MAX_AGE:Number,JWT_ALGORITHM:String,JWT_ISSUER:String,JWT_MAX_AGE:Number,JWT_HTTP_ONLY:Boolean,JWT_SAME_SITE:String,JWT_COOKIE_NAME:String,JWT_SECURE:Boolean}),{JWT_SECRET:o,JWT_EXPIRES_IN:n,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:d,JWT_ALGORITHM:l,JWT_ISSUER:u,JWT_MAX_AGE:g,JWT_HTTP_ONLY:y,JWT_SAME_SITE:p,JWT_COOKIE_NAME:T,JWT_SECURE:E}=a;r.strict.ok(o,"JWT secret should be present"),r.strict.ok(n,"JWT expires in should be present"),r.strict.ok(i,"JWT refresh secret should be present"),r.strict.ok(c,"JWT refresh expires in should be present"),r.strict.ok(l,"JWT algorithm should be present"),r.strict.ok(u,"JWT issuer should be present"),r.strict.ok(g,"JWT max age should be present"),r.strict.ok(y,"JWT http only should be present"),r.strict.ok(p,"JWT same site should be present"),r.strict.ok(T,"JWT cookie name should be present"),r.strict.ok(E,"JWT secure should be present"),r.strict.ok(d,"JWT refresh max age should be present");const m={JWT_SECRET:o,JWT_EXPIRES_IN:n,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:d,JWT_ALGORITHM:l,JWT_ISSUER:u,JWT_MAX_AGE:g,JWT_HTTP_ONLY:y,JWT_SAME_SITE:p,JWT_COOKIE_NAME:T,JWT_SECURE:E}},6184:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{CI:()=>U,E0:()=>I,Eu:()=>C,Zv:()=>D,bI:()=>j,gg:()=>_,hv:()=>O,kL:()=>w,lM:()=>v,pD:()=>m,tY:()=>S,ys:()=>R,zX:()=>f,zh:()=>A});var a=t(818),o=t.n(a),n=t(829),i=t.n(n),c=t(5595),d=t(6153),l=t(3101),u=t(452),g=t(2993),y=t(8995),p=t(581),T=t(9031),E=e([c,d,u,g,y,p]);[c,d,u,g,y,p]=E.then?(await E)():E,o().config();const m=async(e,s)=>{try{const{caption:t,location:r,tags:a}=e.body,o=e.cookies.jwt;if(!o)return void s.status(401).json({message:"Unauthorized"});i().verify(o,l.n.JWT_SECRET,(async(e,o)=>{if(e)return console.log(e.message),void s.status(401).json({message:"Unauthorized"});const n=o.id,i=await d.A.findByPk(n);if(!i)return void s.status(404).json({message:"User not found"});const l=await c.A.findImageByReferenceKey("user_id",n);if(!l)return s.status(404).json({message:"Image not found"});const g=await u.A.create({caption:t,imageURL:l.imageUrl,location:r,tags:a||"",created_At:new Date,creator_Id:i.id});if(g)return s.status(201).json({message:"Post created successfully",newPost:g}),g;s.status(400).json({message:"Error creating new post."})}))}catch(e){console.error("Error creating post:",e),s.status(500).json({message:"Internal server error"})}},h=async(e,s,t)=>{try{const e=await c.A.findOne({where:{imageUrl:t}});if(!e)return void s.status(404).json({message:"Image not found"});await e.destroy(),s.status(200).json({message:"Image deleted successfully"})}catch(e){console.error("Error deleting image:",e),s.status(500).json({message:"Internal server error"})}},_=async(e,s)=>{try{const{caption:t,location:r,tags:a,imageUrl:o}=e.body,n=parseInt(e.query.post_id,10);if(!n)return void s.status(400).json({message:"Post ID is required"});const c=e.cookies.jwt;if(!c)return void s.status(401).json({message:"Unauthorized"});i().verify(c,l.n.JWT_SECRET,(async(i,c)=>{if(i)return console.log(i.message),void s.status(401).json({message:"Unauthorized"});const l=c.id,y=await d.A.findByPk(l);if(!y)return void s.status(404).json({message:"User not found"});const p=await u.A.findOne({where:{id:n,creator_Id:l}});if(!p)return void s.status(404).json({message:"Post not found"});if(p.creator_Id!==y.id)return void s.status(403).json({message:"Unauthorized attempt!"});let T=p?.imageURL;if(o)try{const t=await(0,g.A)(e,s);if(!t)return void s.status(404).json({message:"Image not found"});T=t}catch(e){return void s.status(401).json({message:"Unauthorized"})}const E=await p.update({id:p.id,caption:t,imageURL:T,location:r,tags:a,created_At:new Date});return E?(s.status(200).json({message:"Post updated successfully",post:E}),E):(o&&await h(e,s,o),void s.status(400).json({message:"Error updating post"}))}))}catch(e){console.error("Error updating post:",e),s.status(500).json({message:"Internal server error"})}},f=async(e,s)=>{try{const e=await u.A.findAll({include:[{model:d.A,as:"User",attributes:["id","username","email","profilePic","bio","firstName","lastName","imageURL","avatarUrl"]}]});s.status(200).json({posts:e})}catch(e){console.error("Error getting posts:",e),s.status(500).json({message:"Internal server error"})}},w=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(t,r)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const a=r.id,o=parseInt(e.body.post_id,10);if(isNaN(o))return void s.status(400).json({message:"Invalid post ID"});if(!await d.A.findByPk(a))return void s.status(404).json({message:"User not found"});const n=await u.A.findByPk(o);if(!n)return void s.status(404).json({message:"Post not found"});if(await y.A.findOne({where:{post_id:o,user_id:a}}))return void s.status(400).json({message:"Post already liked"});const i=await y.A.createLike({user_id:a,post_id:o,created_At:new Date});n.likes_Count||(n.likes_Count=0);const c=n.likes_Count+1;await n.update({likes_Count:c})?s.status(201).json({message:"Post liked successfully",like:i}):s.status(400).json({message:"Error liking post."})}))}catch(e){console.error("Error liking post:",e),s.status(500).json({message:"Internal server error"})}},S=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(t,r)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const a=r.id;if(!a)return void s.status(400).json({message:"User ID is required"});const o=parseInt(e.query.post_id,10);if(!o)return void s.status(400).json({message:"Post ID is required"});const n=await u.A.findOne({where:{id:o,creator_Id:a}});n?s.status(200).json({post:n}):s.status(404).json({message:"Post not found"})}))}catch(e){console.error("Error getting post:",e),s.status(500).json({message:"Internal server error"})}},A=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(t,r)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const a=r.id;if(!a)return void s.status(400).json({message:"User ID is required"});const o=parseInt(e.body.post_id,10);if(!await d.A.findByPk(a))return void s.status(404).json({message:"User not found"});const n=await u.A.findByPk(o);if(!n)return void s.status(404).json({message:"Post not found"});const i=await y.A.findOne({where:{post_id:o,user_id:a}});i&&await i.destroy();let c=n.likes_Count||0;c>0&&(c-=1),await n.update({likes_Count:c}),await n.save(),s.status(200).json({message:i?"Like removed successfully":"Post liked successfully",post:n})}))}catch(e){console.error("Error toggling like:",e),s.status(500).json({message:"Internal server error"})}},I=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(t,r)=>{if(t)return console.log("JWT verification error",t.message),void s.status(401).json({message:"Unauthorized Invalid Token"});const a=r.id;if(!a)return void s.status(400).json({message:"User ID is required"});const o=parseInt(e.body.post_id,10);if(!o)return void s.status(400).json({message:"Post ID is required"});if(!await d.A.findByPk(a))return void s.status(404).json({message:"User not found"});if(!await u.A.findByPk(o))return void s.status(404).json({message:"Post not found"});if(await p.A.findOne({where:{post_id:o,user_id:a}}))return void s.status(400).json({message:"Post already saved"});const n=await p.A.createSave({id:a,user_id:a,post_id:o,saveDate:new Date});n?s.status(201).json({message:"Post saved successfully",save:n}):s.status(400).json({message:"Error saving post."})}))}catch(e){console.error("Error saving post:",e),s.status(500).json({message:"Internal server error"})}},D=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(t,r)=>{if(t)return console.log("JWT verification error",t.message),void s.status(401).json({message:"Unauthorized Invalid Token"});const a=r.id;if(!a)return void s.status(400).json({message:"User ID is required"});const o=parseInt(e.body.post_id,10);if(!o)return void s.status(400).json({message:"Post ID is required"});if(!await d.A.findByPk(a))return void s.status(404).json({message:"User not found"});if(!await u.A.findByPk(o))return void s.status(404).json({message:"Post not found"});const n=await p.A.findOne({where:{post_id:o,user_id:a}});n&&await n.destroy(),s.status(200).json({message:n?"Post unsaved successfully":"Post not saved"})}))}catch(e){console.error("Error deleting saved post:",e),s.status(500).json({message:"Internal server error"})}},v=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(e,t)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});const r=t.id;if(!r)return void s.status(400).json({message:"User ID is required"});if(!await d.A.findByPk(r))return void s.status(404).json({message:"User not found"});const a=await p.A.getSavedPosts(r);s.status(200).json({savedPosts:a})}))}catch(e){console.error("Error getting saved posts:",e),s.status(500).json({message:"Internal server error"})}},R=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(t,r)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const a=r.id;if(!a)return void s.status(400).json({message:"User ID is required"});if(!await d.A.findByPk(a))return void s.status(404).json({message:"User not found"});const o=parseInt(e.body.post_id,10);if(!o)return void s.status(400).json({message:"Post ID is required from server"});const n=await u.A.findByPk(o);if(!n)return void s.status(404).json({message:"Post not found"});const i=await p.A.findOne({where:{post_id:o,user_id:a}});if(i&&await i.destroy(),n.imageURL){const e=await c.A.findOne({where:{imageUrl:n.imageURL}});e&&await e.destroy()}await n.destroy(),s.status(200).json({message:"Post deleted successfully"})}))}catch(e){console.error("Error deleting post:",e),s.status(500).json({message:"Internal server error"})}},C=async(e,s)=>{try{const{page:t=0,limit:r=10}=e.query,a=t?parseInt(t,10)*parseInt(r,10):0,o=await u.A.findAndCountAll({limit:parseInt(r,10),offset:a,order:[["created_At","DESC"]]});s.status(200).json({posts:o,page:parseInt(t,10),totalPages:Math.ceil(o.count/parseInt(r,10)),totalCount:o.count})}catch(e){console.error("Error getting posts:",e),s.status(500).json({message:"Internal server error"})}},U=async(e,s)=>{try{const{searchValue:t}=e.body;if(!t)return void s.status(400).json({message:"Search value is required"});const r=await u.A.findAll({where:{[T.Op.or]:[{caption:{[T.Op.like]:`%${t}%`}},{tags:{[T.Op.like]:`%${t}%`}},{location:{[T.Op.like]:`%${t}%`}}]}});s.status(200).json({posts:r})}catch(e){console.error("Error searching posts:",e),s.status(500).json({message:"Internal server error"})}},O=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,l.n.JWT_SECRET,(async(e,t)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});const r=t.id;if(!r)return void s.status(400).json({message:"User ID is required"});const a=await u.A.findAll({where:{creator_Id:r}});s.status(200).json({posts:a})}))}catch(e){console.error("Error getting user posts:",e),s.status(500).json({message:"Internal server error"})}},j=async(e,s)=>{try{const e=await u.A.findAll({order:[["likes_Count","DESC"]]});s.status(200).json({popularPosts:e})}catch(e){console.error("Error getting popular posts:",e),s.status(500).json({message:"Internal server error"})}};r()}catch(e){r(e)}}))},9024:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{Be:()=>E,TU:()=>y,Ub:()=>T,pH:()=>p});var a=t(818),o=t.n(a),n=t(829),i=t.n(n),c=t(3101),d=t(16),l=t(80),u=t(2300),g=e([l]);l=(g.then?(await g)():g)[0],o().config();const y=async(e,s)=>{try{const{name:t,username:r,email:a,password:o}=e.body;if(!(t&&r&&a&&o))return(0,u.H4)(new Error("New User validation error"),s);if(await l.A.findOne({where:{email:a}}))return(0,u.H4)(new Error("UserRegistrations.email: User already exists "),s);const n=await l.A.create({newUser:t,username:r,email:a,hashedpassword:o,createdAt:new Date}),i=(0,d.Jj)({id:n.id});s.cookie("jwt",i,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.status(201).json({id:n.id,name:n.newUser,username:n.username,email:n.email,token:i})}catch(e){(0,u.H4)(e,s)}},p=async(e,s)=>{try{const{email:t,password:r}=e.body;if(!t||!r)return(0,u.H4)(new Error("Login Validation Error!"),s);const a=await l.A.loginUser(t,r);if(!a)throw new Error("User not found");const o=(0,d.Jj)({id:a.id}),n=(0,d.v3)({id:a.id});console.log("User logged in:",n),s.cookie("jwt",o,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.cookie("refreshToken",n,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.setHeader("Authorization",`Bearer ${o}`),s.locals.user=a,s.json({token:o,refreshToken:n,user:a.id})}catch(e){(0,u.H4)(e,s)}},T=async(e,s)=>{try{const t=e.cookies.jwt,r=e.cookies.refreshToken;if(!t&&!r)return void s.status(400).json({message:"No tokens provided!"});s.cookie("jwt","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),s.cookie("refreshToken","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),s.status(200).json({message:"User logged out"})}catch(e){(0,u.H4)(e,s)}},E=async(e,s)=>{const t=e.cookies.refreshToken;t?i().verify(t,c.n.JWT_REFRESH_SECRET,(async(e,t)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});try{const e=t.id;if(console.log("User ID:",e),!e)return void s.status(400).json({message:"User ID is required"});const r=await l.A.findByPk(e);if(!r)return s.status(404).json({message:"User not found"});const a=i().sign({id:r.id},c.n.JWT_SECRET,{expiresIn:c.n.JWT_EXPIRES_IN,algorithm:c.n.JWT_ALGORITHM,issuer:c.n.JWT_ISSUER});s.cookie("jwt",a,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.status(200).json({token:a,user:r.id})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}})):s.status(401).json({message:"Unauthorized"})};r()}catch(e){r(e)}}))},2993:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>d});var a=t(5595),o=t(829),n=t.n(o),i=(t(4469),t(6153)),c=e([a,i]);[a,i]=c.then?(await c)():c;const d=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});n().verify(t,process.env.JWT_SECRET,(async(e,t)=>{if(e)return void s.status(401).json({message:"Unauthorized"});const r=t.id;if(!r)return void s.status(401).json({message:"Unauthorized"});if(!await i.A.findByPk(r))return void s.status(401).json({message:"Unauthorized"});const o=await a.A.findImageByReferenceKey("user_id",r);o?s.status(200).json({imageUrl:o.imageUrl}):s.status(200).json({message:"No image found"})}))}catch(e){throw console.error("Error getting image preview:",e),new Error("Failed to get image preview")}};r()}catch(e){r(e)}}))},4361:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{CF:()=>g,TK:()=>p,k7:()=>y});var a=t(818),o=t.n(a),n=t(829),i=t.n(n),c=t(3101),d=t(6153),l=t(2993),u=e([d,l]);[d,l]=u.then?(await u)():u,o().config();const g=async(e,s)=>{const t=e.cookies.jwt;if(t)try{i().verify(t,c.n.JWT_SECRET,(async(t,r)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const a=r.id;if(!await d.A.findByPk(a))return void s.status(404).json({message:"User not found"});const o=parseInt(e.query.limit,10)||10,n=await d.A.getAllUsers(o,["id","firstName","lastName","username","imageURL","avatarUrl","bio"]);s.status(200).json({users:n})}))}catch(e){console.error("Error getting all users:",e),s.status(500).json({message:"Internal server error"})}else s.status(401).json({message:"Unauthorized"})},y=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,c.n.JWT_SECRET,(async(e,t)=>{if(e)return console.log(e.message),void s.status(401).json({message:"Unauthorized"});const r=t.id,a=await d.A.findByPk(r);if(!a)return void s.status(404).json({message:"User not found"});if(a.id!==r)return void s.status(403).json({message:"Unauthorized attempt!"});const o=await d.A.findByPk(r);o?s.status(200).json({requestedUser:o,user_id:r}):s.status(404).json({message:"User not found"})}))}catch(e){console.error("Error getting user by ID:",e),s.status(500).json({message:"Internal server error"})}},p=async(e,s)=>{try{const{id:t}=e.params,r=e.body,a=e.cookies.jwt;if(!a)return void s.status(401).json({message:"Unauthorized"});i().verify(a,c.n.JWT_SECRET,(async(a,o)=>{if(a)return console.log(a.message),void s.status(401).json({message:"Unauthorized"});const n=o.id,i=await d.A.findByPk(n);if(!i)return void s.status(404).json({message:"User not found"});if(i.id!==Number(t))return void s.status(403).json({message:"Unauthorized attempt!"});let{imageUrl:c}=e.body;if(c)try{const t=await(0,l.A)(e,s);if(!t)return void s.status(404).json({message:"Image not found"});r.imageUrl=t}catch(e){return console.error("Error fetching image preview URL:",e),void s.status(500).json({message:"Error updating profile picture"})}const[u,g]=await d.A.updateUser(Number(t),r);0!==u?s.status(200).json({updatedUsers:g}):s.status(400).json({message:"Error updating user"})}))}catch(e){console.error("Error updating user:",e),s.status(500).json({message:"Internal server error"})}};r()}catch(e){r(e)}}))},2785:(e,s,t)=>{t.d(s,{TA:()=>n});var r=t(1763),a=t.n(r),o=t(9469);const n=a()({windowMs:o._.RARE_LIMIT_WINDOW_MS,max:o._.MAX,message:o._.RARE_LIMIT_MESSAGE,statusCode:o._.RARE_LIMIT_CODE,handler:(e,s)=>{s.status(o._.RARE_LIMIT_CODE).json({message:o._.RARE_LIMIT_MESSAGE})},keyGenerator:async(e,s)=>e.ip?e.ip.replace(/:\d+[^:]*$/,""):(s.status(500).send({message:"Warning: request.ip is missing!"}),e.socket.remoteAddress)})},16:(e,s,t)=>{t.d(s,{Jj:()=>c,v3:()=>d});var r=t(818),a=t.n(r),o=t(829),n=t.n(o),i=t(3101);a().config();const c=e=>{try{return n().sign(e,i.n.JWT_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}},d=e=>{try{return n().sign(e,i.n.JWT_REFRESH_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_REFRESH_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}}},2051:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{FH:()=>u});var a=t(818),o=t.n(a),n=t(829),i=t.n(n),c=t(3101),d=t(6153),l=e([d]);d=(l.then?(await l)():l)[0],o().config();const u=async(e,s,t)=>{try{const r=e.cookies.jwt;if(!r)return s.locals.user=null,t();i().verify(r,c.n.JWT_SECRET,(async(e,r)=>{if(e)return console.error("JWT verification error:",e.message),s.locals.user=null,t();try{const e=await d.A.findByPk(r.id);console.log("decodedToken:",r),s.locals.user=e||null}catch(e){console.error("Error retrieving user:",e),s.locals.user=null}t()}))}catch(e){console.error("Error verifying user:",e),s.locals.user=null,t()}};r()}catch(e){r(e)}}))},1125:(e,s,t)=>{t.d(s,{r:()=>a});var r=t(128);async function a(){const e=(0,r.J)();let s=0;for(;s<10;)try{return await e.authenticate(),console.log("Database connection established, Starting Server....."),await e.sync({force:!0}),console.log("Drop and re-sync db."),e}catch(e){console.error("Database connection failed:",e),s++,await new Promise((e=>setTimeout(e,1e3)))}throw console.error("Max attempts reached, database connection failed"),new Error("Database connection failed")}},128:(e,s,t)=>{t.d(s,{J:()=>c});var r=t(9031),a=t(3085),o=t(3024),n=t.n(o);const i={Dialect:"mariadb",host:a.L.DB_HOST||"localhost",username:a.L.DB_USER||"metalbrain",password:a.L.DB_PASS||"password",database:a.L.DB_NAME||"FindSomeOne",socketPath:a.L.DB_SOCKET_PATH||"/var/run/mysqld/mysqld.sock",socketTimeout:a.L.DB_SOCKET_TIMEOUT||1e3,compress:a.L.DB_COMPRESS||!1,debug:a.L.DB_DEBUG||!1,permitLocalInfile:a.L.DB_PERMIT_LOCAL_INFILE||!1,trace:a.L.DB_TRACE||!0,checkDuplicate:a.L.DB_CHECK_DUPLICATE||!1,connectAttributes:JSON.parse(a.L.DB_CONNECTION_ATTRIBUTES||"{}"),connectionTimeout:a.L.DB_CONNECTION_TIMEOUT||1e3,port:a.L.DB_PORT||3306,ssl:a.L.DB_SSL||!1,dialectOptions:{ssl:{ca:a.L.DB_SSL_CA?n().readFileSync(a.L.DB_SSL_CA).toString():"",key:a.L.DB_SSL_KEY?n().readFileSync(a.L.DB_SSL_KEY).toString():"",cert:a.L.DB_SSL_CERT?n().readFileSync(a.L.DB_SSL_CERT).toString():""}}};function c(){return new r.Sequelize(i.database,i.username,i.password,{host:i.host,dialect:i.Dialect,port:i.port,ssl:i.ssl,dialectOptions:i.dialectOptions})}},3121:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>d});var a=t(423),o=t(5520),n=t(3136),i=t(6760),c=t(3085);const e=(0,i.dirname)((0,n.fileURLToPath)("file:///home/babsdevsys/appV-1/src/server/loaders/dataLoader/sequlize.ts")),d=new a.Sequelize({dialect:o.MariaDbDialect,host:c.L.DB_HOST,user:c.L.DB_USER,password:c.L.DB_PASS,database:c.L.DB_NAME,port:c.L.DB_PORT,ssl:c.L.DB_SSL,models:await(0,a.importModels)(e+"/src/server/models/**/*.model.{ts,js}")});r()}catch(e){r(e)}}),1)},6633:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>w});var a=t(7252),o=t.n(a),n=t(6898),i=t.n(n),c=t(3268),d=t.n(c),l=t(2525),u=t.n(l),g=t(2096),y=t.n(g),p=t(9469),T=t(4388),E=t(2785),m=t(2300),h=t(6928),_=t.n(h),f=e([T]);async function w({app:e}){e.get("/status",((e,s)=>s.sendStatus(200).end())),e.use(((e,s,t)=>(s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),"OPTIONS"===e.method?s.sendStatus(204):t()))),e.use(d().urlencoded({extended:!0})),e.use(o().json()),e.use(o().urlencoded({extended:!0})),e.use(i()()),e.use(d().json()),e.use(o().static(_().join(__dirname,"dist"))),e.use("/assets",o().static(_().join(__dirname,"assets")));const s=p._.TRUST_PROXY||"false",t=p._.NUMBER_OF_PROXIES||1;return s?e.set("trust proxy",!0):"false"===s?e.set("trust proxy",!1):(e.set("trust proxy",s),e.set("trust proxy",t)),e.set("trust proxy",t),e.get("/ip",((e,s)=>s.send(e.ip))),e.use(u()({contentSecurityPolicy:!1})),e.use(y()(p._.MORGAN)),e.use(E.TA),e.use(T.Q),e.use(m.sh),e}T=(f.then?(await f)():f)[0],r()}catch(S){r(S)}}))},1545:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.r(s),t.d(s,{default:()=>l});var a=t(6633),o=t(3121),n=t(1125),i=t(2541),c=t(2273),d=e([a,o,i]);async function l({app:e}){await(0,i.K)(),await(0,n.r)(),o.A,await(0,a.A)({app:e}),(0,c.A)(),console.log("Express Server Intialized!")}[a,o,i]=d.then?(await d)():d,r()}catch(u){r(u)}}))},5595:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>u});var a=t(9031),o=t(128),n=t(6153),i=t(452),c=e([n,i]);[n,i]=c.then?(await c)():c;const d=(0,o.J)();class l extends a.Model{static async findImageById(e){return await this.findByPk(e)}static async findImageByReferenceKey(e,s){try{return await this.findOne({where:{[e]:s},order:[["created_At","DESC"]]})}catch(t){throw console.error(`Error finding image by reference key: ${e}, value: ${s}`,t),t}}}l.init({id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},imageUrl:{type:a.DataTypes.STRING,allowNull:!0},user_id:{type:a.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:a.DataTypes.INTEGER,references:{model:"Posts",key:"id"}},created_At:{type:a.DataTypes.DATE,allowNull:!1,defaultValue:a.DataTypes.NOW}},{sequelize:d,modelName:"ImageStorages",timestamps:!1}),l.init({id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},imageUrl:{type:a.DataTypes.STRING,allowNull:!0},user_id:{type:a.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:a.DataTypes.INTEGER,references:{model:"Posts",key:"id"},allowNull:!0},created_At:{type:a.DataTypes.DATE,allowNull:!1,defaultValue:a.DataTypes.NOW}},{sequelize:d,modelName:"ImageStorages",timestamps:!1}),l.afterCreate((async e=>{const s=await n.A.findByPk(e.user_id);s&&(s.imageURL=e.imageUrl,await s.save())})),n.A.hasMany(l,{foreignKey:"user_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),i.A.hasMany(l,{foreignKey:"post_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),l.belongsTo(n.A,{foreignKey:"user_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),l.belongsTo(i.A,{foreignKey:"post_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),await d.sync({force:!1}).then((()=>{console.log("New Image synced successfully")})).catch((e=>{console.error("Error syncing new image:",e)}));const u=l;r()}catch(e){r(e)}}),1)},8995:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>u});var a=t(9031),o=t(128),n=t(6153),i=t(452),c=e([n,i]);[n,i]=c.then?(await c)():c;const d=(0,o.J)();class l extends a.Model{static async createLike(e){return await this.create(e)}static async findLikeById(e){return await this.findByPk(e)}static async findLikeByReferenceKey(e,s){return await this.findOne({where:{[e]:s}})}static async findAllLikesByReferenceKey(e,s){return await this.findAll({where:{[e]:s}})}static async deleteLikeByReferenceKey(e,s){await this.destroy({where:{[e]:s}})}}l.init({id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},user_id:{type:a.DataTypes.INTEGER,allowNull:!1,references:{model:"Users",key:"id"}},post_id:{type:a.DataTypes.INTEGER,allowNull:!1,references:{model:"Posts",key:"id"}},created_At:{type:a.DataTypes.DATE,allowNull:!0}},{sequelize:d,modelName:"Likes",timestamps:!1,freezeTableName:!0}),n.A.hasMany(l,{foreignKey:"user_id",onDelete:"CASCADE"}),l.belongsTo(n.A,{foreignKey:"user_id"}),i.A.hasMany(l,{foreignKey:"post_id",onDelete:"CASCADE"}),l.belongsTo(i.A,{foreignKey:"post_id"}),l.sync({force:!1}).then((()=>{console.log("Like synced successfully")})).catch((e=>{console.error("Error syncing like:",e)}));const u=l;r()}catch(e){r(e)}}))},452:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>l});var a=t(9031),o=t(128),n=t(6153),i=e([n]);n=(i.then?(await i)():i)[0];const c=(0,o.J)();class d extends a.Model{static async createPost(e){return await this.create(e)}static async updatePost(e,s){const[t,r]=await this.update(s,{where:{id:e},returning:!0});return[t,r]}static async deletePost(e){const s=await this.findOne({where:{id:e}});s&&await s.destroy()}static async getAllPosts(){return await this.findAll()}static async getInfinitePosts(e,s){return await this.findAll({offset:e,limit:s})}static async getPostByID(e){return await this.findOne({where:{id:e}})}static async getUserPosts(e){return await this.findAll({where:{creator_Id:e}})}static async getSavedPost(e){return await this.findOne({where:{id:e}})}}d.init({id:{type:a.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},caption:{type:a.DataTypes.STRING,allowNull:!1},imageURL:{type:a.DataTypes.STRING,allowNull:!0},location:{type:a.DataTypes.STRING,allowNull:!0},tags:{type:a.DataTypes.STRING,allowNull:!1},likes_Count:{type:a.DataTypes.INTEGER,allowNull:!0},created_At:{type:a.DataTypes.DATE,allowNull:!0},creator_Id:{type:a.DataTypes.INTEGER,allowNull:!1,references:{model:"Users",key:"id"}}},{sequelize:c,modelName:"Posts",timestamps:!1}),d.createPost=async function(e){try{return await this.create(e)}catch(e){throw console.error("Error creating new post:",e),e}},d.updatePost=async function(e,s){try{const[t,r]=await this.update(s,{where:{id:e},returning:!0});return[t,r]}catch(e){throw console.error("Error updating post:",e),e}},d.getInfinitePosts=async function(e,s){try{return await this.findAll({offset:e,limit:s})}catch(e){throw console.error("Error getting infinite posts:",e),e}},d.getPostByID=async function(e){try{return await this.findOne({where:{id:e}})}catch(e){throw console.error("Error getting post by ID:",e),e}},d.getUserPosts=async function(e){try{return await this.findAll({where:{creator_Id:e}})}catch(e){throw console.error("Error getting user posts:",e),e}},n.A.hasMany(d,{foreignKey:"creator_Id",onDelete:"CASCADE",onUpdate:"CASCADE"}),d.belongsTo(n.A,{foreignKey:"creator_Id",onDelete:"CASCADE",onUpdate:"CASCADE"}),await c.sync({force:!1}).then((()=>{console.log("Post synced successfully")})).catch((e=>{console.error("Error syncing Post:",e)}));const l=d;r()}catch(e){r(e)}}),1)},581:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>u});var a=t(9031),o=t(128),n=t(6153),i=t(452),c=e([n,i]);[n,i]=c.then?(await c)():c;const d=(0,o.J)();class l extends a.Model{static async createSave(e){return await this.create(e)}static async checkIfSaved(e,s){return!!await this.findOne({where:{user_id:e,post_id:s}})}static async deleteSavedPost(e){const s=await this.findOne({where:{post_id:e}});s&&await s.destroy()}static async getSavedPosts(e){return await this.findAll({where:{user_id:e},include:[{model:i.A,as:"Post"}]})}}l.init({id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},user_id:{type:a.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:a.DataTypes.INTEGER,references:{model:"Posts",key:"id"}},saveDate:{type:a.DataTypes.DATE,allowNull:!0,defaultValue:a.DataTypes.NOW}},{sequelize:d,tableName:"Saves",timestamps:!1,freezeTableName:!0}),l.deleteSavedPost=async function(e){const s=await this.findOne({where:{post_id:e}});s&&await s.destroy()},l.belongsTo(n.A,{foreignKey:"user_id",targetKey:"id"}),l.belongsTo(i.A,{foreignKey:"post_id",targetKey:"id"}),l.sync({force:!1}).then((()=>{console.log("Save Post synced successfully")})).catch((e=>{console.error("Error syncing Save post:",e)}));const u=l;r()}catch(e){r(e)}}))},6153:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>n});var a=t(9031);const e=(0,t(128).J)();class o extends a.Model{static async getUserByID(e){return await this.findOne({where:{id:e}})}static async getAllUsers(e,s){return await this.findAll({limit:e,attributes:s})}static async updateUser(e,s){const[t,r]=await this.update(s,{where:{id:e},returning:!0});return[t,r]}}o.init({id:{type:a.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},firstName:{type:a.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},lastName:{type:a.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},username:{type:a.DataTypes.STRING,allowNull:!1,unique:!0,validate:{is:/^[a-zA-Z0-9_]*$/,len:[3,20]}},email:{type:a.DataTypes.STRING,unique:!0,allowNull:!1,validate:{isEmail:!0,len:[5,50],notEmpty:!0}},hashedpassword:{type:a.DataTypes.STRING(64)},status:{type:a.DataTypes.STRING,allowNull:!1,defaultValue:"unverified"},bio:{type:a.DataTypes.STRING,defaultValue:"This is a new user."},join:{type:a.DataTypes.DATE,defaultValue:a.DataTypes.NOW},avatarUrl:{type:a.DataTypes.STRING},imageURL:{type:a.DataTypes.STRING},profilePic:{type:a.DataTypes.STRING},label:{type:a.DataTypes.STRING,defaultValue:"New User"},last_activity:{type:a.DataTypes.DATE,defaultValue:a.DataTypes.NOW},updated_at:{type:a.DataTypes.DATE,defaultValue:a.DataTypes.NOW},UserRegistrationID:{type:a.DataTypes.UUID,allowNull:!0,references:{model:"UserRegistration",key:"id"}}},{sequelize:e,modelName:"Users",timestamps:!1,updatedAt:"updated_at"}),await e.sync({force:!1}).then((()=>{console.log("New User synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const n=o;r()}catch(e){r(e)}}),1)},80:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>y});var a=t(9031),o=t(128),n=t(5486),i=t.n(n),c=t(8635),d=t(6153),l=e([d]);d=(l.then?(await l)():l)[0];const u=(0,o.J)();class g extends a.Model{static async loginUser(e,s){return await this.findOne({where:{email:e,hashedpassword:s}})}static async logoutUser(e){return await this.findOne({where:{email:e}})}static async resetPassword(e,s){return await this.findOne({where:{email:e,hashedpassword:s}})}}g.init({id:{type:a.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},newUser:{type:a.DataTypes.STRING,allowNull:!1},username:{type:a.DataTypes.STRING,allowNull:!1},email:{type:a.DataTypes.STRING,allowNull:!1},hashedpassword:{type:a.DataTypes.STRING,allowNull:!1},createdAt:{type:a.DataTypes.DATE,allowNull:!1,defaultValue:a.DataTypes.NOW}},{sequelize:u,modelName:"UserRegistration",createdAt:"createdAt",timestamps:!1,freezeTableName:!0}),g.beforeCreate((async e=>{try{if(e){const s=i().genSaltSync(10),t=await i().hash(String(e.hashedpassword),s);e.hashedpassword=t}}catch(e){throw console.error("Error hashing password:",e),new Error("Error hashing password")}})),g.afterCreate((async e=>{try{if(e){const s=e.newUser?.lastIndexOf(" "),t=-1!==s?e.newUser?.slice(0,s):e.newUser,r=-1!==s?e.newUser?.slice(s??1):"",a=(0,c.q)(e.username);await d.A.upsert({firstName:t,lastName:r,username:e.username,email:e.email,hashedpassword:e.hashedpassword,status:"unverified",bio:"I am a new user.",join:new Date,avatarUrl:a,imageURL:null,profilePic:null,label:"New User",last_activity:new Date,updated_at:new Date,UserRegistrationID:e.id})}}catch(e){throw console.error("Error registering new user:",e),new Error("Error registering new user")}})),g.loginUser=async function(e,s){try{const t=await this.findOne({where:{email:e}});if(t){if(await i().compare(s,t.hashedpassword))return t;throw new Error("Incorrect password")}throw new Error("Incorrect email")}catch(e){throw console.error("Error logging in user:",e),new Error("User not found")}},g.logoutUser=async function(e){try{return await this.findOne({where:{email:e}})}catch(e){throw console.error("Error logging out user:",e),new Error("User not found")}},await u.sync({force:!1}).then((()=>{console.log("New User Registered synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const y=g;r()}catch(e){r(e)}}),1)},2317:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>E});var a=t(7252),o=t.n(a),n=t(8577),i=t.n(n),c=t(1976),d=t(9024),l=t(3268),u=t.n(l),g=t(6898),y=t.n(g),p=e([d]);d=(p.then?(await p)():p)[0];const T=o().Router();T.use(i()(c.v)),T.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),T.use(u().urlencoded({extended:!0})),T.use(y()()),T.use(o().json()),T.use(u().json()),T.post("/api/register",d.TU),T.post("/api/login",d.pH),T.get("/api/logout",d.Ub),T.post("/api/refresh-token",d.Be);const E=T;r()}catch(e){r(e)}}))},6010:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>w});var a=t(818),o=t.n(a),n=t(7252),i=t.n(n),c=t(8577),d=t.n(c),l=t(6153),u=t(3268),g=t.n(u),y=t(6898),p=t.n(y),T=t(2051),E=t(829),m=t.n(E),h=t(3101),_=e([l,T]);[l,T]=_.then?(await _)():_;const f=i().Router();o().config(),f.use(d()()),f.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),f.use(g().urlencoded({extended:!0})),f.use(p()()),f.use(i().json()),f.use(g().json()),f.get("/api/getUser",T.FH,(async(e,s,t)=>{const r=e.cookies.jwt;r?m().verify(r,h.n.JWT_SECRET,(async(e,r)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});try{const e=await l.A.findByPk(r.id);if(!e)return void s.status(400).json({message:"User ID is required S routes"});s.status(200).json({user:e})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}return t()})):s.status(401).json({message:"Unauthorized"})}));const w=f;r()}catch(e){r(e)}}))},8358:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>I});var a=t(818),o=t.n(a),n=t(7252),i=t.n(n),c=t(8577),d=t.n(c),l=t(1976),u=t(3268),g=t.n(u),y=t(6898),p=t.n(y),T=t(6020),E=t(2993),m=t(5595),h=t(829),_=t.n(h),f=t(6153),w=t(3101),S=e([E,m,f]);[E,m,f]=S.then?(await S)():S,o().config();const A=i().Router();A.use(d()(l.v)),A.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),s.header("encoding","multipart/form-data"),t()})),A.use(g().urlencoded({extended:!0})),A.use(p()()),A.use(i().json()),A.use(g().json()),A.post("/api/uploadImage",T.A.single("image"),(async(e,s)=>{try{console.log("File uploaded:",e.file);const t=`assets/images/${e.file?.filename}`,r=e.cookies.jwt,a=parseInt(e.body.postId,10);if(!r)return void s.status(401).json({message:"Unauthorized"});_().verify(r,w.n.JWT_SECRET,(async(e,r)=>{if(e)return void s.status(401).json({message:"Unauthorized"});const o=r.id;o&&await f.A.findByPk(o)?await m.A.create({imageUrl:t,user_id:o||null,post_id:a||null,created_At:new Date})?s.status(200).json({message:"Image uploaded successfully",imageUrl:t}):s.status(500).send({error:"Error creating image record"}):s.status(401).json({message:"Unauthorized"})}))}catch(e){console.error("Error uploading image:",e),s.status(500).json({message:"Internal server error"})}})),A.get("/api/sendImageUrl",E.A);const I=A;r()}catch(e){r(e)}}))},9785:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>E});var a=t(7252),o=t.n(a),n=t(8577),i=t.n(n),c=t(6898),d=t.n(c),l=t(3268),u=t.n(l),g=t(6184),y=t(2051),p=e([g,y]);[g,y]=p.then?(await p)():p;const T=o().Router();T.use(i()()),T.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),T.use(u().urlencoded({extended:!0})),T.use(d()()),T.use(o().json()),T.use(u().json()),T.post("/api/createPost",g.pD),T.put("/api/updatePost",g.gg),T.delete("/api/deletePost",g.ys),T.get("/api/getAllPosts",g.zX),T.get("/api/getPostById",y.FH,g.tY),T.post("/api/likePost",g.kL),T.post("/api/savePost",y.FH,g.E0),T.get("/api/getSavedPosts",y.FH,g.lM),T.delete("/api/deleteSavedPost",g.Zv),T.delete("/api/deleteLikePost",g.zh),T.get("/api/getInfinitePosts",g.Eu),T.post("/api/searchPosts",g.CI),T.get("/api/getUserPosts",g.hv),T.get("/api/getPopularPosts",g.bI);const E=T;r()}catch(e){r(e)}}))},4388:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{Q:()=>m});var a=t(7252),o=t.n(a),n=t(9469),i=t(2317),c=t(6010),d=t(4704),l=t(3268),u=t.n(l),g=t(6898),y=t.n(g),p=t(9785),T=t(8358),E=e([i,c,d,p,T]);[i,c,d,p,T]=E.then?(await E)():E;const m=o().Router();m.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),m.use(u().urlencoded({extended:!0})),m.use(y()()),m.use(o().json()),m.use(u().json()),m.get("/",((e,s)=>{s.send({status:`${n._.NODE_ENV}`,message:`${n._.RESPONSE_STATUS}`,name:`${n._.APP_NAME}`})})),m.use(i.A),m.use(p.A),m.use(T.A),m.use(d.A),m.use(c.A),r()}catch(e){r(e)}}))},4704:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>f});var a=t(7252),o=t.n(a),n=t(8577),i=t.n(n),c=t(3268),d=t.n(c),l=t(6898),u=t.n(l),g=t(4361),y=t(2051),p=t(829),T=t.n(p),E=t(3101),m=t(6153),h=e([g,y,m]);[g,y,m]=h.then?(await h)():h;const _=o().Router();_.use(i()()),_.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),_.use(d().urlencoded({extended:!0})),_.use(u()()),_.use(o().json()),_.use(d().json()),_.get("/api/getCurrentUser",y.FH,(async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});T().verify(t,E.n.JWT_SECRET,(async(e,t)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});const r=t.id;if(r)try{if(!await m.A.findByPk(r))return void s.status(400).json({message:"User ID is required S routes"})}catch(e){throw new Error(e)}else s.status(400).json({message:"User ID is required"})}))}catch(e){s.status(400).json({message:"User ID is required"})}})),_.get("/api/getAllUsers",g.CF),_.get("/api/getUserByID",g.k7),_.get("/api/updateUser",g.TK);const f=_;r()}catch(e){r(e)}}))},6020:(e,s,t)=>{t.d(s,{A:()=>g});var r=t(8461),a=t.n(r),o=t(6928),n=t.n(o),i=t(7189),c=t(9896),d=t.n(c);const l="/home/babsdevsys/appV-1/public/assets/images";d().existsSync(l)||d().mkdirSync(l,{recursive:!0});const u=a().diskStorage({destination:function(e,s,t){t(null,l)},filename:function(e,s,t){const r=Date.now()+"-"+Math.round(1e9*Math.random());t(null,s.fieldname+"-"+r+n().extname(s.originalname))}}),g=a()({storage:u,limits:{fileSize:1e7},fileFilter:function(e,s,t){const r=/jpeg|jpg|png|svg/,a=r.test(s.mimetype),o=r.test(n().extname(s.originalname).toLowerCase());if(a&&o)return t(null,!0);(async(e,s)=>{try{if(!(await(0,i.validateMIMEType)(e.path,{originalFilename:e.originalname,allowMimeTypes:["image/jpeg","image/png","image/svg+xml"]})).ok)return s(new Error("Invalid file type"));s(null,!0)}catch(e){console.error("Error validating file type:",e),s(new Error("Error validating file type"))}})(s.path,t)}})},2273:(e,s,t)=>{t.d(s,{A:()=>o});var r=t(643);function a(){return new Promise((e=>{setTimeout((()=>{e()}),1e3)}))}new r.PerformanceObserver((e=>{e.getEntries().forEach((e=>{console.log(`${e.name}: ${e.duration}ms`)})),r.performance.clearMarks()})).observe({type:"measure"});const o=async function(){try{r.performance.mark("Loader Start",{detail:"Loader started"}),await a(),r.performance.mark("Task 1 End",{detail:"Task 1 completed"}),await a(),r.performance.mark("Task 2 End",{detail:"Task 2 completed"});const e=r.performance.measure("Task 2 Duration","Task 1 End","Task 2 End");console.log(e.duration),r.performance.mark("Loader End"),r.performance.measure("Total Loader Duration","Loader Start","Loader End")}catch(e){console.error("Error in loader:",e)}}},2541:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{K:()=>c});var a=t(128),o=t(5595),n=e([o]);o=(n.then?(await n)():n)[0];const i=(0,a.J)();async function c(){const e=await i.transaction();try{await o.A.truncate({transaction:e}),await e.commit(),console.log("Tables have been truncated...")}catch(s){await e.rollback(),console.error("Error truncating tables:",s)}}r()}catch(d){r(d)}}))},8635:(e,s,t)=>{function r(e){const s=e.split(" ").map((e=>e.charAt(0).toUpperCase())).join("");return`https://ui-avatars.com/api/?name=${encodeURIComponent(s)}&size=200&background=random&color=fff`}t.d(s,{q:()=>r}),t(6982)},2300:(e,s,t)=>{t.d(s,{H4:()=>c,sh:()=>u});var r=t(1708),a=t.n(r),o=t(9896),n=t.n(o),i=t(9469);const c=(e,s)=>{console.error(e.message);let t={};e.message.includes("New User validation error")&&(t={name:"Name is required",username:"username is required",email:"email is required",password:"password is required"}),e.message.includes("UserRegistrations.email")&&(t.email="Email is already registered"),e.message.includes("incorrect email")&&(t.email="email is not registered"),e.message.includes("Incorrect password")&&(t.password="password is incorrect"),"SequelizeValidationError"===e.name&&e.error&&(t=e.error.reduce(((e,s)=>(e[s.path]=s.message,e)),{})),s.status(e.code||500).json({errors:t})};function d(e){const s=`${(new Date).toISOString()} - ${e.message}\n${e.stack}\n`;n().appendFileSync("error.log",s)}const l=new Map;function u(e,s,t,r){d(e),t.status(500).json({message:"An unexpected error occurred"}),r(e)}a().on("unhandledRejection",((e,s)=>{console.error("Unhandled Rejection at:",s,"reason:",e),l.set(s,e)})),a().on("rejectionHandled",(e=>{l.delete(e)})),a().on("unhandledRejection",((e,s)=>{d(e),console.error("Unhandled Rejection at:",s,"reason:",e),a().exit(1)})),a().on("uncaughtException",(e=>{d(e),console.error("Uncaught Exception:",e),a().exit(1)})),a().on("uncaughtException",(e=>{n().writeSync(a().stderr.fd,`Caught exception: ${e}\nException Origin: ${origin}\n`)})),setTimeout((()=>{console.log("This will still run.")}),i._.ERROR_TIMEOUT)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,