"use strict";exports.id=545,exports.ids=[545],exports.modules={1976:(e,t,s)=>{s.d(t,{v:()=>d});var r=s(2613);const a=(0,s(7546).load)({CORS_ORIGIN:String,CORS_OPTIONS_SUCCESS_STATUS:Number,CORS_CREDENTIALS:Boolean,CORS_METHODS:String}),{CORS_ORIGIN:n,CORS_OPTIONS_SUCCESS_STATUS:o,CORS_CREDENTIALS:i,CORS_METHODS:c}=a;r.strict.ok(n,"CORS origin should be present"),r.strict.ok(o,"CORS options success status should be present"),r.strict.ok(i,"CORS credentials should be present"),r.strict.ok(c,"CORS methods should be present");const l={CORS_ORIGIN:n,CORS_OPTIONS_SUCCESS_STATUS:o,CORS_CREDENTIALS:i,CORS_METHODS:c};s(818).config();const d={origin:l.CORS_ORIGIN,methods:l.CORS_METHODS,credentials:l.CORS_CREDENTIALS,optionsSuccessStatus:l.CORS_OPTIONS_SUCCESS_STATUS}},3085:(e,t,s)=>{s.d(t,{L:()=>R});var r=s(2613);const a=(0,s(7546).load)({DB_HOST:String,DB_PORT:Number,DB_USER:String,DB_PASS:String,DB_NAME:String,DB_SOCKET_PATH:String,DB_SOCKET_TIMEOUT:Number,DB_COMPRESS:Boolean,DB_DEBUG:Boolean,DB_PERMIT_LOCAL_INFILE:Boolean,DB_TRACE:Boolean,DB_CHECK_DUPLICATE:Boolean,DB_SSL:Boolean,DB_SSL_CA:String,DB_SSL_KEY:String,DB_SSL_CERT:String,DB_CONNECTION_ATTRIBUTES:String,DB_CONNECTION_TIMEOUT:Number}),{DB_HOST:n,DB_PORT:o,DB_USER:i,DB_PASS:c,DB_NAME:l,DB_SOCKET_PATH:d,DB_SOCKET_TIMEOUT:u,DB_COMPRESS:T,DB_DEBUG:E,DB_PERMIT_LOCAL_INFILE:_,DB_TRACE:y,DB_CHECK_DUPLICATE:S,DB_SSL:p,DB_SSL_CA:g,DB_SSL_KEY:h,DB_SSL_CERT:m,DB_CONNECTION_ATTRIBUTES:A,DB_CONNECTION_TIMEOUT:w}=a;r.strict.ok(n,"Database host should be present"),r.strict.ok(o,"Database port should be present"),r.strict.ok(i,"Database user should be present"),r.strict.ok(c,"Database password should be present"),r.strict.ok(l,"Database name should be present");const R={DB_HOST:n,DB_PORT:o,DB_USER:i,DB_PASS:c,DB_NAME:l,DB_SOCKET_PATH:d,DB_SOCKET_TIMEOUT:u,DB_COMPRESS:T,DB_DEBUG:E,DB_PERMIT_LOCAL_INFILE:_,DB_TRACE:y,DB_CHECK_DUPLICATE:S,DB_CONNECTION_ATTRIBUTES:A,DB_CONNECTION_TIMEOUT:w,DB_SSL:p,DB_SSL_CA:g,DB_SSL_KEY:h,DB_SSL_CERT:m}},3101:(e,t,s)=>{s.d(t,{n:()=>p});var r=s(2613);const a=(0,s(7546).load)({JWT_SECRET:String,JWT_EXPIRES_IN:String,JWT_REFRESH_SECRET:String,JWT_REFRESH_EXPIRES_IN:String,JWT_REFRESH_MAX_AGE:Number,JWT_ALGORITHM:String,JWT_ISSUER:String,JWT_MAX_AGE:Number,JWT_HTTP_ONLY:Boolean,JWT_SAME_SITE:String,JWT_COOKIE_NAME:String,JWT_SECURE:Boolean}),{JWT_SECRET:n,JWT_EXPIRES_IN:o,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:l,JWT_ALGORITHM:d,JWT_ISSUER:u,JWT_MAX_AGE:T,JWT_HTTP_ONLY:E,JWT_SAME_SITE:_,JWT_COOKIE_NAME:y,JWT_SECURE:S}=a;r.strict.ok(n,"JWT secret should be present"),r.strict.ok(o,"JWT expires in should be present"),r.strict.ok(i,"JWT refresh secret should be present"),r.strict.ok(c,"JWT refresh expires in should be present"),r.strict.ok(d,"JWT algorithm should be present"),r.strict.ok(u,"JWT issuer should be present"),r.strict.ok(T,"JWT max age should be present"),r.strict.ok(E,"JWT http only should be present"),r.strict.ok(_,"JWT same site should be present"),r.strict.ok(y,"JWT cookie name should be present"),r.strict.ok(S,"JWT secure should be present"),r.strict.ok(l,"JWT refresh max age should be present");const p={JWT_SECRET:n,JWT_EXPIRES_IN:o,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:l,JWT_ALGORITHM:d,JWT_ISSUER:u,JWT_MAX_AGE:T,JWT_HTTP_ONLY:E,JWT_SAME_SITE:_,JWT_COOKIE_NAME:y,JWT_SECURE:S}},6184:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{p:()=>E});var a=s(818),n=s.n(a),o=s(829),i=s.n(o),c=s(5595),l=s(6153),d=s(3101),u=s(452),T=e([c,l,u]);[c,l,u]=T.then?(await T)():T,n().config();const E=async(e,t)=>{try{const{caption:s,location:r,tags:a}=e.body,n=e.cookies.jwt;if(!n)return void t.status(401).json({message:"Unauthorized"});i().verify(n,d.n.JWT_SECRET,(async(e,n)=>{if(e)return console.log(e.message),void t.status(401).json({message:"Unauthorized"});const o=n.id,i=await l.A.findByPk(o);if(!i)return void t.status(404).json({message:"User not found"});const d=await c.A.findImageByReferenceKey("user_id",o);if(!d)return t.status(404).json({message:"Image not found"});const T=await u.A.create({caption:s,imageURL:d.imageUrl,location:r,tags:a||"",created_At:new Date,creator_Id:i.id});if(T)return t.status(201).json({message:"Post created successfully",newPost:T}),T;t.status(400).json({message:"Error creating new post."})}))}catch(e){console.error("Error creating post:",e),t.status(500).json({message:"Internal server error"})}};r()}catch(e){r(e)}}))},9024:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{Be:()=>S,TU:()=>E,Ub:()=>y,oC:()=>p,pH:()=>_});var a=s(818),n=s.n(a),o=s(829),i=s.n(o),c=s(3101),l=s(16),d=s(80),u=s(2300),T=e([d]);d=(T.then?(await T)():T)[0],n().config();const E=async(e,t)=>{try{const{name:s,username:r,email:a,password:n}=e.body;if(!(s&&r&&a&&n))return(0,u.H4)(new Error("New User validation error"),t);if(await d.A.findOne({where:{email:a}}))return(0,u.H4)(new Error("UserRegistrations.email: User already exists "),t);const o=await d.A.create({newUser:s,username:r,email:a,hashedpassword:n,createdAt:new Date}),i=(0,l.Jj)({id:o.id});t.cookie("jwt",i,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),t.status(201).json({id:o.id,name:o.newUser,username:o.username,email:o.email,token:i})}catch(e){(0,u.H4)(e,t)}},_=async(e,t)=>{try{const{email:s,password:r}=e.body;if(!s||!r)return(0,u.H4)(new Error("Login Validation Error!"),t);const a=await d.A.loginUser(s,r);if(!a)throw new Error("User not found");const n=(0,l.Jj)({id:a.id}),o=(0,l.v3)({id:a.id});console.log("User logged in:",o),t.cookie("jwt",n,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),t.cookie("refreshToken",o,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),t.setHeader("Authorization",`Bearer ${n}`),t.locals.user=a,t.json({token:n,refreshToken:o,user:a.id})}catch(e){(0,u.H4)(e,t)}},y=async(e,t)=>{try{const s=e.cookies.jwt,r=e.cookies.refreshToken;if(!s&&!r)return void t.status(400).json({message:"No tokens provided!"});t.cookie("jwt","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),t.cookie("refreshToken","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),t.status(200).json({message:"User logged out"})}catch(e){(0,u.H4)(e,t)}},S=async(e,t)=>{const s=e.cookies.refreshToken;s?i().verify(s,c.n.JWT_REFRESH_SECRET,(async(e,s)=>{if(e)return console.log("JWT verification error",e.message),void t.status(401).json({message:"Unauthorized Invalid Token"});try{const e=s.id;if(console.log("User ID:",e),!e)return void t.status(400).json({message:"User ID is required"});const r=await d.A.findByPk(e);if(!r)return t.status(404).json({message:"User not found"});const a=i().sign({id:r.id},c.n.JWT_SECRET,{expiresIn:c.n.JWT_EXPIRES_IN,algorithm:c.n.JWT_ALGORITHM,issuer:c.n.JWT_ISSUER});t.cookie("jwt",a,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),t.status(200).json({token:a,user:r.id})}catch(e){console.error("Error getting current user:",e),t.status(500).json({message:"Error getting current user"})}})):t.status(401).json({message:"Unauthorized"})},p=(e,t,s)=>{const r=e.cookies.jwt;r?(i().verify(r,c.n.JWT_SECRET,(async(e,r)=>{if(e)return console.log(e.message),t.status(401).json({message:"Unauthorized"});const a=r.id,n=await d.A.findByPk(a);return n?(t.locals.user=n,s()):t.status(404).json({message:"User not found"})})),s()):t.status(401).json({message:"Unauthorized"})};r()}catch(e){r(e)}}))},2993:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>l});var a=s(5595),n=s(829),o=s.n(n),i=(s(4469),s(6153)),c=e([a,i]);[a,i]=c.then?(await c)():c;const l=async(e,t)=>{try{const s=e.cookies.jwt;if(!s)return void t.status(401).json({message:"Unauthorized"});o().verify(s,process.env.JWT_SECRET,(async(e,s)=>{if(e)return void t.status(401).json({message:"Unauthorized"});const r=s.id;if(!r)return void t.status(401).json({message:"Unauthorized"});if(!await i.A.findByPk(r))return void t.status(401).json({message:"Unauthorized"});const n=await a.A.findImageByReferenceKey("user_id",r);n?t.status(200).json({imageUrl:n.imageUrl}):t.status(200).json({message:"No image found"})}))}catch(e){throw console.error("Error getting image preview:",e),new Error("Failed to get image preview")}};r()}catch(e){r(e)}}))},2785:(e,t,s)=>{s.d(t,{TA:()=>o});var r=s(1763),a=s.n(r),n=s(9469);const o=a()({windowMs:n._.RARE_LIMIT_WINDOW_MS,max:n._.MAX,message:n._.RARE_LIMIT_MESSAGE,statusCode:n._.RARE_LIMIT_CODE,handler:(e,t)=>{t.status(n._.RARE_LIMIT_CODE).json({message:n._.RARE_LIMIT_MESSAGE})},keyGenerator:async(e,t)=>e.ip?e.ip.replace(/:\d+[^:]*$/,""):(t.status(500).send({message:"Warning: request.ip is missing!"}),e.socket.remoteAddress)})},16:(e,t,s)=>{s.d(t,{Jj:()=>c,gH:()=>l,v3:()=>d});var r=s(818),a=s.n(r),n=s(829),o=s.n(n),i=s(3101);a().config();const c=e=>{try{return o().sign(e,i.n.JWT_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}},l=e=>{try{return o().verify(e,i.n.JWT_SECRET)}catch(e){throw new Error("Error verifying JWT")}},d=e=>{try{return o().sign(e,i.n.JWT_REFRESH_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_REFRESH_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}}},2051:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{FH:()=>E,HW:()=>T});var a=s(818),n=s.n(a),o=s(829),i=s.n(o),c=s(3101),l=s(6153),d=s(16),u=e([l]);l=(u.then?(await u)():u)[0],n().config();const T=async(e,t)=>{const s=e.cookies.token;if(!s)return t.status(401).json({message:"Unauthorized"});try{const e=(0,d.gH)(s).id;if(!e)return void t.status(400).json({message:"User ID is required"});const r=await l.A.findByPk(e);if(!r)return t.status(404).json({message:"User not found"});t.status(200).json(r)}catch(e){console.error("Error getting current user:",e),t.status(500).json({message:"Error getting current user"})}return s},E=async(e,t,s)=>{try{const r=e.cookies.jwt;if(!r)return t.locals.user=null,s();i().verify(r,c.n.JWT_SECRET,(async(e,r)=>{if(e)return console.error("JWT verification error:",e.message),t.locals.user=null,s();try{const e=await l.A.findByPk(r.id);console.log("decodedToken:",r),t.locals.user=e||null}catch(e){console.error("Error retrieving user:",e),t.locals.user=null}s()}))}catch(e){console.error("Error verifying user:",e),t.locals.user=null,s()}};r()}catch(e){r(e)}}))},1125:(e,t,s)=>{s.d(t,{r:()=>a});var r=s(128);async function a(){const e=(0,r.J)();let t=0;for(;t<10;)try{return await e.authenticate(),console.log("Database connection established, Starting Server....."),await e.sync({force:!0}),console.log("Drop and re-sync db."),e}catch(e){console.error("Database connection failed:",e),t++,await new Promise((e=>setTimeout(e,1e3)))}throw console.error("Max attempts reached, database connection failed"),new Error("Database connection failed")}},128:(e,t,s)=>{s.d(t,{J:()=>c});var r=s(9031),a=s(3085),n=s(3024),o=s.n(n);const i={Dialect:"mariadb",host:a.L.DB_HOST||"localhost",username:a.L.DB_USER||"metalbrain",password:a.L.DB_PASS||"password",database:a.L.DB_NAME||"FindSomeOne",socketPath:a.L.DB_SOCKET_PATH||"/var/run/mysqld/mysqld.sock",socketTimeout:a.L.DB_SOCKET_TIMEOUT||1e3,compress:a.L.DB_COMPRESS||!1,debug:a.L.DB_DEBUG||!1,permitLocalInfile:a.L.DB_PERMIT_LOCAL_INFILE||!1,trace:a.L.DB_TRACE||!0,checkDuplicate:a.L.DB_CHECK_DUPLICATE||!1,connectAttributes:JSON.parse(a.L.DB_CONNECTION_ATTRIBUTES||"{}"),connectionTimeout:a.L.DB_CONNECTION_TIMEOUT||1e3,port:a.L.DB_PORT||3306,ssl:a.L.DB_SSL||!1,dialectOptions:{ssl:{ca:a.L.DB_SSL_CA?o().readFileSync(a.L.DB_SSL_CA).toString():"",key:a.L.DB_SSL_KEY?o().readFileSync(a.L.DB_SSL_KEY).toString():"",cert:a.L.DB_SSL_CERT?o().readFileSync(a.L.DB_SSL_CERT).toString():""}}};function c(){return new r.Sequelize(i.database,i.username,i.password,{host:i.host,dialect:i.Dialect,port:i.port,ssl:i.ssl,dialectOptions:i.dialectOptions})}},3121:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>l});var a=s(423),n=s(5520),o=s(3136),i=s(6760),c=s(3085);const e=(0,i.dirname)((0,o.fileURLToPath)("file:///home/babsdevsys/appV-1/src/server/loaders/dataLoader/sequlize.ts")),l=new a.Sequelize({dialect:n.MariaDbDialect,host:c.L.DB_HOST,user:c.L.DB_USER,password:c.L.DB_PASS,database:c.L.DB_NAME,port:c.L.DB_PORT,ssl:c.L.DB_SSL,models:await(0,a.importModels)(e+"/src/server/models/**/*.model.{ts,js}")});r()}catch(e){r(e)}}),1)},6633:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>h});var a=s(7252),n=s.n(a),o=s(6898),i=s.n(o),c=s(3268),l=s.n(c),d=s(2525),u=s.n(d),T=s(2096),E=s.n(T),_=s(9469),y=s(4388),S=s(2785),p=s(2300),g=e([y]);async function h({app:e}){e.get("/status",((e,t)=>t.sendStatus(200).end())),e.use(((e,t,s)=>(t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials","true"),"OPTIONS"===e.method?t.sendStatus(204):s()))),e.use(l().urlencoded({extended:!0})),e.use(n().json()),e.use(n().urlencoded({extended:!0})),e.use(i()()),e.use(l().json());const t=_._.TRUST_PROXY||"false",s=_._.NUMBER_OF_PROXIES||1;return t?e.set("trust proxy",!0):"false"===t?e.set("trust proxy",!1):(e.set("trust proxy",t),e.set("trust proxy",s)),e.set("trust proxy",s),e.get("/ip",((e,t)=>t.send(e.ip))),e.use(u()({contentSecurityPolicy:!1})),e.use(E()(_._.MORGAN)),e.use(S.TA),e.use(y.Q),e.use(p.sh),e}y=(g.then?(await g)():g)[0],r()}catch(m){r(m)}}))},1545:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.r(t),s.d(t,{default:()=>l});var a=s(6633),n=s(3121),o=s(1125),i=s(2541),c=e([a,n,i]);async function l({app:e}){await(0,i.K)(),await(0,o.r)(),n.A,await(0,a.A)({app:e}),console.log("Express Server Intialized!")}[a,n,i]=c.then?(await c)():c,r()}catch(d){r(d)}}))},5595:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>u});var a=s(9031),n=s(128),o=s(6153),i=s(452),c=e([o,i]);[o,i]=c.then?(await c)():c;const l=(0,n.J)();class d extends a.Model{static async findImageById(e){return await this.findByPk(e)}static async findImageByReferenceKey(e,t){try{return await this.findOne({where:{[e]:t},order:[["created_At","ASC"]]})}catch(s){throw console.error(`Error finding image by reference key: ${e}, value: ${t}`,s),s}}}d.init({id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},imageUrl:{type:a.DataTypes.STRING,allowNull:!0},user_id:{type:a.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:a.DataTypes.INTEGER,references:{model:"Posts",key:"id"}},created_At:{type:a.DataTypes.DATE,allowNull:!1,defaultValue:a.DataTypes.NOW}},{sequelize:l,modelName:"ImageStorages",timestamps:!1}),d.init({id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},imageUrl:{type:a.DataTypes.STRING,allowNull:!0},user_id:{type:a.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:a.DataTypes.INTEGER,references:{model:"Posts",key:"id"},allowNull:!0},created_At:{type:a.DataTypes.DATE,allowNull:!1,defaultValue:a.DataTypes.NOW}},{sequelize:l,modelName:"ImageStorages",timestamps:!1}),d.afterCreate((async e=>{const t=await o.A.findByPk(e.user_id);t&&(t.imageURL=e.imageUrl,await t.save())})),o.A.hasMany(d,{foreignKey:"user_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),i.A.hasMany(d,{foreignKey:"post_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),d.belongsTo(o.A,{foreignKey:"user_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),d.belongsTo(i.A,{foreignKey:"post_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),await l.sync({alter:!1}).then((()=>{console.log("New Image synced successfully")})).catch((e=>{console.error("Error syncing new image:",e)}));const u=d;r()}catch(e){r(e)}}),1)},452:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>d});var a=s(9031),n=s(128),o=s(6153),i=e([o]);o=(i.then?(await i)():i)[0];const c=(0,n.J)();class l extends a.Model{static async createPost(e){return await this.create(e)}static async updatePost(e,t){const[s,r]=await this.update(t,{where:{id:e},returning:!0});return[s,r]}static async getPostByID(e){return await this.findOne({where:{id:e}})}}l.init({id:{type:a.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},caption:{type:a.DataTypes.STRING,allowNull:!1},imageURL:{type:a.DataTypes.STRING,allowNull:!0},location:{type:a.DataTypes.STRING,allowNull:!0},tags:{type:a.DataTypes.STRING,allowNull:!1},likes_Count:{type:a.DataTypes.INTEGER,allowNull:!0},created_At:{type:a.DataTypes.DATE,allowNull:!0},creator_Id:{type:a.DataTypes.INTEGER,allowNull:!1,references:{model:"Users",key:"id"}}},{sequelize:c,modelName:"Posts",timestamps:!1}),l.createPost=async function(e){try{return await this.create(e)}catch(e){throw console.error("Error creating new post:",e),e}},l.updatePost=async function(e,t){try{const[s,r]=await this.update(t,{where:{id:e},returning:!0});return[s,r]}catch(e){throw console.error("Error updating post:",e),e}},o.A.hasMany(l,{foreignKey:"creator_Id",onDelete:"CASCADE",onUpdate:"CASCADE"}),l.belongsTo(o.A,{foreignKey:"creator_Id",onDelete:"CASCADE",onUpdate:"CASCADE"}),await c.sync({alter:!1}).then((()=>{console.log("Post synced successfully")})).catch((e=>{console.error("Error syncing Post:",e)}));const d=l;r()}catch(e){r(e)}}),1)},6153:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>o});var a=s(9031);const e=(0,s(128).J)();class n extends a.Model{static async getUserByID(e){return await this.findOne({where:{id:e}})}}n.init({id:{type:a.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},firstName:{type:a.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},lastName:{type:a.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},username:{type:a.DataTypes.STRING,allowNull:!1,unique:!0,validate:{is:/^[a-zA-Z0-9_]*$/,len:[3,20]}},email:{type:a.DataTypes.STRING,unique:!0,allowNull:!1,validate:{isEmail:!0,len:[5,50],notEmpty:!0}},hashedpassword:{type:a.DataTypes.STRING(64)},status:{type:a.DataTypes.STRING,allowNull:!1,defaultValue:"unverified"},bio:{type:a.DataTypes.STRING,defaultValue:"This is a new user."},join:{type:a.DataTypes.DATE,defaultValue:a.DataTypes.NOW},avatarUrl:{type:a.DataTypes.STRING},imageURL:{type:a.DataTypes.STRING},profilePic:{type:a.DataTypes.STRING},label:{type:a.DataTypes.STRING,defaultValue:"New User"},last_activity:{type:a.DataTypes.DATE,defaultValue:a.DataTypes.NOW},updated_at:{type:a.DataTypes.DATE,defaultValue:a.DataTypes.NOW},UserRegistrationID:{type:a.DataTypes.UUID,allowNull:!0,references:{model:"UserRegistration",key:"id"}}},{sequelize:e,modelName:"Users",timestamps:!1,updatedAt:"updated_at"}),await e.sync().then((()=>{console.log("New User synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const o=n;r()}catch(e){r(e)}}),1)},80:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>E});var a=s(9031),n=s(128),o=s(5486),i=s.n(o),c=s(8635),l=s(6153),d=e([l]);l=(d.then?(await d)():d)[0];const u=(0,n.J)();class T extends a.Model{static async loginUser(e,t){return await this.findOne({where:{email:e,hashedpassword:t}})}static async logoutUser(e){return await this.findOne({where:{email:e}})}static async resetPassword(e,t){return await this.findOne({where:{email:e,hashedpassword:t}})}}T.init({id:{type:a.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},newUser:{type:a.DataTypes.STRING,allowNull:!1},username:{type:a.DataTypes.STRING,allowNull:!1},email:{type:a.DataTypes.STRING,allowNull:!1},hashedpassword:{type:a.DataTypes.STRING,allowNull:!1},createdAt:{type:a.DataTypes.DATE,allowNull:!1,defaultValue:a.DataTypes.NOW}},{sequelize:u,modelName:"UserRegistration",createdAt:"createdAt",timestamps:!1,freezeTableName:!0}),T.beforeCreate((async e=>{try{if(e){const t=i().genSaltSync(10),s=await i().hash(String(e.hashedpassword),t);e.hashedpassword=s}}catch(e){throw console.error("Error hashing password:",e),new Error("Error hashing password")}})),T.afterCreate((async e=>{try{if(e){const t=e.newUser?.lastIndexOf(" "),s=-1!==t?e.newUser?.slice(0,t):e.newUser,r=-1!==t?e.newUser?.slice(t??1):"",a=(0,c.q)(e.username);await l.A.upsert({firstName:s,lastName:r,username:e.username,email:e.email,hashedpassword:e.hashedpassword,status:"unverified",bio:"I am a new user.",join:new Date,avatarUrl:a,imageURL:null,profilePic:null,label:"New User",last_activity:new Date,updated_at:new Date,UserRegistrationID:e.id})}}catch(e){throw console.error("Error registering new user:",e),new Error("Error registering new user")}})),T.loginUser=async function(e,t){try{const s=await this.findOne({where:{email:e}});if(s){if(await i().compare(t,s.hashedpassword))return s;throw new Error("Incorrect password")}throw new Error("Incorrect email")}catch(e){throw console.error("Error logging in user:",e),new Error("User not found")}},T.logoutUser=async function(e){try{return await this.findOne({where:{email:e}})}catch(e){throw console.error("Error logging out user:",e),new Error("User not found")}},await u.sync().then((()=>{console.log("New User Registered synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const E=T;r()}catch(e){r(e)}}),1)},2317:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>S});var a=s(7252),n=s.n(a),o=s(8577),i=s.n(o),c=s(1976),l=s(9024),d=s(3268),u=s.n(d),T=s(6898),E=s.n(T),_=e([l]);l=(_.then?(await _)():_)[0];const y=n().Router();y.use(i()(c.v)),y.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials","true"),s()})),y.use(u().urlencoded({extended:!0})),y.use(E()()),y.use(n().json()),y.use(u().json()),y.post("/api/register",l.TU),y.post("/api/login",l.pH),y.get("/api/logout",l.Ub),y.post("/api/refresh-token",l.Be),y.get("/api/currentUser",l.oC);const S=y;r()}catch(e){r(e)}}))},6010:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>A});var a=s(818),n=s.n(a),o=s(7252),i=s.n(o),c=s(8577),l=s.n(c),d=s(6153),u=s(3268),T=s.n(u),E=s(6898),_=s.n(E),y=s(2051),S=s(829),p=s.n(S),g=s(3101),h=e([d,y]);[d,y]=h.then?(await h)():h;const m=i().Router();n().config(),m.use(l()()),m.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials","true"),s()})),m.use(T().urlencoded({extended:!0})),m.use(_()()),m.use(i().json()),m.use(T().json()),m.get("/api/getUser",y.FH,(async(e,t,s)=>{const r=e.cookies.jwt;r?p().verify(r,g.n.JWT_SECRET,(async(e,r)=>{if(e)return console.log("JWT verification error",e.message),void t.status(401).json({message:"Unauthorized Invalid Token"});try{const e=await d.A.findByPk(r.id);if(!e)return void t.status(400).json({message:"User ID is required"});t.status(200).json({user:e})}catch(e){console.error("Error getting current user:",e),t.status(500).json({message:"Error getting current user"})}return s()})):t.status(401).json({message:"Unauthorized"})}));const A=m;r()}catch(e){r(e)}}))},8358:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>D});var a=s(818),n=s.n(a),o=s(7252),i=s.n(o),c=s(8577),l=s.n(c),d=s(1976),u=s(3268),T=s.n(u),E=s(6898),_=s.n(E),y=s(6020),S=s(2993),p=s(5595),g=s(829),h=s.n(g),m=s(6153),A=s(3101),w=e([S,p,m]);[S,p,m]=w.then?(await w)():w,n().config();const R=i().Router();R.use(l()(d.v)),R.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials","true"),t.header("encoding","multipart/form-data"),s()})),R.use(T().urlencoded({extended:!0})),R.use(_()()),R.use(i().json()),R.use(T().json()),R.post("/api/uploadImage",y.A.single("image"),(async(e,t)=>{try{console.log("File uploaded:",e.file);const s=`assets/images/${e.file?.filename}`,r=e.cookies.jwt,a=parseInt(e.body.postId,10);if(!r)return void t.status(401).json({message:"Unauthorized"});h().verify(r,A.n.JWT_SECRET,(async(e,r)=>{if(e)return void t.status(401).json({message:"Unauthorized"});const n=r.id;n&&await m.A.findByPk(n)?await p.A.create({imageUrl:s,user_id:n||null,post_id:a||null,created_At:new Date})?t.status(200).json({message:"Image uploaded successfully",imageUrl:s}):t.status(500).send({error:"Error creating image record"}):t.status(401).json({message:"Unauthorized"})}))}catch(e){console.error("Error uploading image:",e),t.status(500).json({message:"Internal server error"})}})),R.get("/api/sendImageUrl",S.A);const D=R;r()}catch(e){r(e)}}))},9785:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>y});var a=s(7252),n=s.n(a),o=s(8577),i=s.n(o),c=s(6898),l=s.n(c),d=s(3268),u=s.n(d),T=s(6184),E=e([T]);T=(E.then?(await E)():E)[0];const _=n().Router();_.use(i()()),_.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials","true"),s()})),_.use(u().urlencoded({extended:!0})),_.use(l()()),_.use(n().json()),_.use(u().json()),_.post("/api/createPost",T.p);const y=_;r()}catch(e){r(e)}}))},4388:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{Q:()=>p});var a=s(7252),n=s.n(a),o=s(9469),i=s(2317),c=s(6010),l=s(4704),d=s(3268),u=s.n(d),T=s(6898),E=s.n(T),_=s(9785),y=s(8358),S=e([i,c,l,_,y]);[i,c,l,_,y]=S.then?(await S)():S;const p=n().Router();p.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials","true"),s()})),p.use(u().urlencoded({extended:!0})),p.use(E()()),p.use(n().json()),p.use(u().json()),p.get("/",((e,t)=>{t.send({status:`${o._.NODE_ENV}`,message:`${o._.RESPONSE_STATUS}`,name:`${o._.APP_NAME}`})})),p.use(i.A),p.use(l.A),p.use(_.A),p.use(y.A),p.use(c.A),r()}catch(e){r(e)}}))},4704:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{A:()=>y});var a=s(7252),n=s.n(a),o=s(8577),i=s.n(o),c=s(3268),l=s.n(c),d=s(6898),u=s.n(d),T=s(2051),E=e([T]);T=(E.then?(await E)():E)[0];const _=n().Router();_.use(i()()),_.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Credentials","true"),s()})),_.use(l().urlencoded({extended:!0})),_.use(u()()),_.use(n().json()),_.use(l().json()),_.get("/api/getCurrentUser",T.HW,(async(e,t)=>{if(!t.locals.user)return t.status(401).json({message:"Unauthorized"});try{const e=t.locals.user;t.status(200).json({user:e})}catch(e){console.error("Error getting current user:",e),t.status(500).json({message:"Error getting current user"})}return t}));const y=_;r()}catch(e){r(e)}}))},6020:(e,t,s)=>{s.d(t,{A:()=>T});var r=s(8461),a=s.n(r),n=s(6928),o=s.n(n),i=s(7189),c=s(9896),l=s.n(c);const d="/home/babsdevsys/appV-1/public/assets/images";l().existsSync(d)||l().mkdirSync(d,{recursive:!0});const u=a().diskStorage({destination:function(e,t,s){s(null,d)},filename:function(e,t,s){const r=Date.now()+"-"+Math.round(1e9*Math.random());s(null,t.fieldname+"-"+r+o().extname(t.originalname))}}),T=a()({storage:u,limits:{fileSize:1e7},fileFilter:function(e,t,s){const r=/jpeg|jpg|png|svg/,a=r.test(t.mimetype),n=r.test(o().extname(t.originalname).toLowerCase());if(a&&n)return s(null,!0);(async(e,t)=>{try{if(!(await(0,i.validateMIMEType)(e.path,{originalFilename:e.originalname,allowMimeTypes:["image/jpeg","image/png","image/svg+xml"]})).ok)return t(new Error("Invalid file type"));t(null,!0)}catch(e){console.error("Error validating file type:",e),t(new Error("Error validating file type"))}})(t.path,s)}})},2541:(e,t,s)=>{s.a(e,(async(e,r)=>{try{s.d(t,{K:()=>c});var a=s(128),n=s(5595),o=e([n]);n=(o.then?(await o)():o)[0];const i=(0,a.J)();async function c(){try{await i.transaction((async e=>{await n.A.truncate({transaction:e})})),console.log("Tables have been truncated...")}catch(e){console.error("Error truncating tables:",e)}}r()}catch(l){r(l)}}))},8635:(e,t,s)=>{function r(e){const t=e.split(" ").map((e=>e.charAt(0).toUpperCase())).join("");return`https://ui-avatars.com/api/?name=${encodeURIComponent(t)}&size=200&background=random&color=fff`}s.d(t,{q:()=>r}),s(6982)},2300:(e,t,s)=>{s.d(t,{H4:()=>c,sh:()=>u});var r=s(1708),a=s.n(r),n=s(9896),o=s.n(n),i=s(9469);const c=(e,t)=>{console.error(e.message);let s={};e.message.includes("New User validation error")&&(s={name:"Name is required",username:"username is required",email:"email is required",password:"password is required"}),e.message.includes("UserRegistrations.email")&&(s.email="Email is already registered"),e.message.includes("incorrect email")&&(s.email="email is not registered"),e.message.includes("Incorrect password")&&(s.password="password is incorrect"),"SequelizeValidationError"===e.name&&e.error&&(s=e.error.reduce(((e,t)=>(e[t.path]=t.message,e)),{})),t.status(e.code||500).json({errors:s})};function l(e){const t=`${(new Date).toISOString()} - ${e.message}\n${e.stack}\n`;o().appendFileSync("error.log",t)}const d=new Map;function u(e,t,s,r){l(e),s.status(500).json({message:"An unexpected error occurred"}),r(e)}a().on("unhandledRejection",((e,t)=>{console.error("Unhandled Rejection at:",t,"reason:",e),d.set(t,e)})),a().on("rejectionHandled",(e=>{d.delete(e)})),a().on("unhandledRejection",((e,t)=>{l(e),console.error("Unhandled Rejection at:",t,"reason:",e),a().exit(1)})),a().on("uncaughtException",(e=>{l(e),console.error("Uncaught Exception:",e),a().exit(1)})),a().on("uncaughtException",(e=>{o().writeSync(a().stderr.fd,`Caught exception: ${e}\nException Origin: ${origin}\n`)})),setTimeout((()=>{console.log("This will still run.")}),i._.ERROR_TIMEOUT)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,