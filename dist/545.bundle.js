"use strict";exports.id=545,exports.ids=[545],exports.modules={1976:(e,s,t)=>{t.d(s,{v:()=>d});var a=t(2613);const r=(0,t(7546).load)({CORS_ORIGIN:String,CORS_OPTIONS_SUCCESS_STATUS:Number,CORS_CREDENTIALS:Boolean,CORS_METHODS:String}),{CORS_ORIGIN:o,CORS_OPTIONS_SUCCESS_STATUS:n,CORS_CREDENTIALS:i,CORS_METHODS:c}=r;a.strict.ok(o,"CORS origin should be present"),a.strict.ok(n,"CORS options success status should be present"),a.strict.ok(i,"CORS credentials should be present"),a.strict.ok(c,"CORS methods should be present");const l={CORS_ORIGIN:o,CORS_OPTIONS_SUCCESS_STATUS:n,CORS_CREDENTIALS:i,CORS_METHODS:c};t(818).config();const d={origin:l.CORS_ORIGIN,methods:l.CORS_METHODS,credentials:l.CORS_CREDENTIALS,optionsSuccessStatus:l.CORS_OPTIONS_SUCCESS_STATUS}},3085:(e,s,t)=>{t.d(s,{L:()=>A});var a=t(2613);const r=(0,t(7546).load)({DB_HOST:String,DB_PORT:Number,DB_USER:String,DB_PASS:String,DB_NAME:String,DB_SOCKET_PATH:String,DB_SOCKET_TIMEOUT:Number,DB_COMPRESS:Boolean,DB_DEBUG:Boolean,DB_PERMIT_LOCAL_INFILE:Boolean,DB_TRACE:Boolean,DB_CHECK_DUPLICATE:Boolean,DB_SSL:Boolean,DB_SSL_CA:String,DB_SSL_KEY:String,DB_SSL_CERT:String,DB_CONNECTION_ATTRIBUTES:String,DB_CONNECTION_TIMEOUT:Number}),{DB_HOST:o,DB_PORT:n,DB_USER:i,DB_PASS:c,DB_NAME:l,DB_SOCKET_PATH:d,DB_SOCKET_TIMEOUT:u,DB_COMPRESS:y,DB_DEBUG:g,DB_PERMIT_LOCAL_INFILE:T,DB_TRACE:E,DB_CHECK_DUPLICATE:p,DB_SSL:m,DB_SSL_CA:_,DB_SSL_KEY:h,DB_SSL_CERT:f,DB_CONNECTION_ATTRIBUTES:w,DB_CONNECTION_TIMEOUT:S}=r;a.strict.ok(o,"Database host should be present"),a.strict.ok(n,"Database port should be present"),a.strict.ok(i,"Database user should be present"),a.strict.ok(c,"Database password should be present"),a.strict.ok(l,"Database name should be present");const A={DB_HOST:o,DB_PORT:n,DB_USER:i,DB_PASS:c,DB_NAME:l,DB_SOCKET_PATH:d,DB_SOCKET_TIMEOUT:u,DB_COMPRESS:y,DB_DEBUG:g,DB_PERMIT_LOCAL_INFILE:T,DB_TRACE:E,DB_CHECK_DUPLICATE:p,DB_CONNECTION_ATTRIBUTES:w,DB_CONNECTION_TIMEOUT:S,DB_SSL:m,DB_SSL_CA:_,DB_SSL_KEY:h,DB_SSL_CERT:f}},3101:(e,s,t)=>{t.d(s,{n:()=>m});var a=t(2613);const r=(0,t(7546).load)({JWT_SECRET:String,JWT_EXPIRES_IN:String,JWT_REFRESH_SECRET:String,JWT_REFRESH_EXPIRES_IN:String,JWT_REFRESH_MAX_AGE:Number,JWT_ALGORITHM:String,JWT_ISSUER:String,JWT_MAX_AGE:Number,JWT_HTTP_ONLY:Boolean,JWT_SAME_SITE:String,JWT_COOKIE_NAME:String,JWT_SECURE:Boolean}),{JWT_SECRET:o,JWT_EXPIRES_IN:n,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:l,JWT_ALGORITHM:d,JWT_ISSUER:u,JWT_MAX_AGE:y,JWT_HTTP_ONLY:g,JWT_SAME_SITE:T,JWT_COOKIE_NAME:E,JWT_SECURE:p}=r;a.strict.ok(o,"JWT secret should be present"),a.strict.ok(n,"JWT expires in should be present"),a.strict.ok(i,"JWT refresh secret should be present"),a.strict.ok(c,"JWT refresh expires in should be present"),a.strict.ok(d,"JWT algorithm should be present"),a.strict.ok(u,"JWT issuer should be present"),a.strict.ok(y,"JWT max age should be present"),a.strict.ok(g,"JWT http only should be present"),a.strict.ok(T,"JWT same site should be present"),a.strict.ok(E,"JWT cookie name should be present"),a.strict.ok(p,"JWT secure should be present"),a.strict.ok(l,"JWT refresh max age should be present");const m={JWT_SECRET:o,JWT_EXPIRES_IN:n,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:l,JWT_ALGORITHM:d,JWT_ISSUER:u,JWT_MAX_AGE:y,JWT_HTTP_ONLY:g,JWT_SAME_SITE:T,JWT_COOKIE_NAME:E,JWT_SECURE:p}},6184:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{CI:()=>v,E0:()=>I,Eu:()=>C,Zv:()=>D,gg:()=>h,kL:()=>w,pD:()=>m,tY:()=>S,ys:()=>R,zX:()=>f,zh:()=>A});var r=t(818),o=t.n(r),n=t(829),i=t.n(n),c=t(5595),l=t(6153),d=t(3101),u=t(452),y=t(2993),g=t(8995),T=t(581),E=t(9031),p=e([c,l,u,y,g,T]);[c,l,u,y,g,T]=p.then?(await p)():p,o().config();const m=async(e,s)=>{try{const{caption:t,location:a,tags:r}=e.body,o=e.cookies.jwt;if(!o)return void s.status(401).json({message:"Unauthorized"});i().verify(o,d.n.JWT_SECRET,(async(e,o)=>{if(e)return console.log(e.message),void s.status(401).json({message:"Unauthorized"});const n=o.id,i=await l.A.findByPk(n);if(!i)return void s.status(404).json({message:"User not found"});const d=await c.A.findImageByReferenceKey("user_id",n);if(!d)return s.status(404).json({message:"Image not found"});const y=await u.A.create({caption:t,imageURL:d.imageUrl,location:a,tags:r||"",created_At:new Date,creator_Id:i.id});if(y)return s.status(201).json({message:"Post created successfully",newPost:y}),y;s.status(400).json({message:"Error creating new post."})}))}catch(e){console.error("Error creating post:",e),s.status(500).json({message:"Internal server error"})}},_=async(e,s,t)=>{try{const e=await c.A.findOne({where:{imageUrl:t}});if(!e)return void s.status(404).json({message:"Image not found"});await e.destroy(),s.status(200).json({message:"Image deleted successfully"})}catch(e){console.error("Error deleting image:",e),s.status(500).json({message:"Internal server error"})}},h=async(e,s)=>{try{const{caption:t,location:a,tags:r,imageUrl:o}=e.body,n=parseInt(e.query.post_id,10);if(!n)return void s.status(400).json({message:"Post ID is required"});const c=e.cookies.jwt;if(!c)return void s.status(401).json({message:"Unauthorized"});i().verify(c,d.n.JWT_SECRET,(async(i,c)=>{if(i)return console.log(i.message),void s.status(401).json({message:"Unauthorized"});const d=c.id,g=await l.A.findByPk(d);if(!g)return void s.status(404).json({message:"User not found"});const T=await u.A.findOne({where:{id:n,creator_Id:d}});if(!T)return void s.status(404).json({message:"Post not found"});if(T.creator_Id!==g.id)return void s.status(403).json({message:"Unauthorized attempt!"});let E=T?.imageURL;if(o)try{const t=await(0,y.A)(e,s);if(!t)return void s.status(404).json({message:"Image not found"});E=t}catch(e){return void s.status(401).json({message:"Unauthorized"})}const p=await T.update({id:T.id,caption:t,imageURL:E,location:a,tags:r,created_At:new Date});return p?(s.status(200).json({message:"Post updated successfully",post:p}),p):(o&&await _(e,s,o),void s.status(400).json({message:"Error updating post"}))}))}catch(e){console.error("Error updating post:",e),s.status(500).json({message:"Internal server error"})}},f=async(e,s)=>{try{const e=await u.A.findAll();s.status(200).json({posts:e})}catch(e){console.error("Error getting posts:",e),s.status(500).json({message:"Internal server error"})}},w=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,d.n.JWT_SECRET,(async(t,a)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const r=a.id,o=parseInt(e.body.post_id,10);if(isNaN(o))return void s.status(400).json({message:"Invalid post ID"});if(!await l.A.findByPk(r))return void s.status(404).json({message:"User not found"});const n=await u.A.findByPk(o);if(!n)return void s.status(404).json({message:"Post not found"});if(await g.A.findOne({where:{post_id:o,user_id:r}}))return void s.status(400).json({message:"Post already liked"});const i=await g.A.createLike({user_id:r,post_id:o,created_At:new Date});n.likes_Count||(n.likes_Count=0);const c=n.likes_Count+1;await n.update({likes_Count:c})?s.status(201).json({message:"Post liked successfully",like:i}):s.status(400).json({message:"Error liking post."})}))}catch(e){console.error("Error liking post:",e),s.status(500).json({message:"Internal server error"})}},S=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,d.n.JWT_SECRET,(async(t,a)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const r=a.id;if(!r)return void s.status(400).json({message:"User ID is required"});const o=e.query.post_id;if(!o)return void s.status(400).json({message:"Post ID is required"});const n=await u.A.findOne({where:{id:o,creator_Id:r}});n?s.status(200).json({post:n}):s.status(404).json({message:"Post not found"})}))}catch(e){console.error("Error getting post:",e),s.status(500).json({message:"Internal server error"})}},A=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,d.n.JWT_SECRET,(async(t,a)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const r=a.id;if(!r)return void s.status(400).json({message:"User ID is required"});const o=parseInt(e.body.post_id,10);if(!await l.A.findByPk(r))return void s.status(404).json({message:"User not found"});const n=await u.A.findByPk(o);if(!n)return void s.status(404).json({message:"Post not found"});const i=await g.A.findOne({where:{post_id:o,user_id:r}});i&&await i.destroy();let c=n.likes_Count||0;c>0&&(c-=1),await n.update({likes_Count:c}),await n.save(),s.status(200).json({message:i?"Like removed successfully":"Post liked successfully",post:n})}))}catch(e){console.error("Error toggling like:",e),s.status(500).json({message:"Internal server error"})}},I=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,d.n.JWT_SECRET,(async(t,a)=>{if(t)return console.log("JWT verification error",t.message),void s.status(401).json({message:"Unauthorized Invalid Token"});const r=a.id;if(!r)return void s.status(400).json({message:"User ID is required"});const o=parseInt(e.body.post_id,10);if(!o)return void s.status(400).json({message:"Post ID is required"});if(!await l.A.findByPk(r))return void s.status(404).json({message:"User not found"});if(!await u.A.findByPk(o))return void s.status(404).json({message:"Post not found"});if(await T.A.findOne({where:{post_id:o,user_id:r}}))return void s.status(400).json({message:"Post already saved"});const n=await T.A.createSave({id:r,user_id:r,post_id:o,saveDate:new Date});n?s.status(201).json({message:"Post saved successfully",save:n}):s.status(400).json({message:"Error saving post."})}))}catch(e){console.error("Error saving post:",e),s.status(500).json({message:"Internal server error"})}},D=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,d.n.JWT_SECRET,(async(t,a)=>{if(t)return console.log("JWT verification error",t.message),void s.status(401).json({message:"Unauthorized Invalid Token"});const r=a.id;if(!r)return void s.status(400).json({message:"User ID is required"});const o=parseInt(e.body.post_id,10);if(!o)return void s.status(400).json({message:"Post ID is required"});if(!await l.A.findByPk(r))return void s.status(404).json({message:"User not found"});if(!await u.A.findByPk(o))return void s.status(404).json({message:"Post not found"});const n=await T.A.findOne({where:{post_id:o,user_id:r}});n&&await n.destroy(),s.status(200).json({message:n?"Post unsaved successfully":"Post not saved"})}))}catch(e){console.error("Error deleting saved post:",e),s.status(500).json({message:"Internal server error"})}},R=async(e,s)=>{try{const t=e.cookies.jwt||e.headers.authorization?.split(" ")[1];if(!t)return void s.status(401).json({message:"Unauthorized"});i().verify(t,d.n.JWT_SECRET,(async(t,a)=>{if(t)return console.log(t.message),void s.status(401).json({message:"Unauthorized"});const r=a.id;if(!r)return void s.status(400).json({message:"User ID is required"});if(!await l.A.findByPk(r))return void s.status(404).json({message:"User not found"});const o=parseInt(e.body.post_id,10);if(!o)return void s.status(400).json({message:"Post ID is required from server"});const n=await u.A.findByPk(o);if(!n)return void s.status(404).json({message:"Post not found"});const i=await T.A.findOne({where:{post_id:o,user_id:r}});if(i&&await i.destroy(),n.imageURL){const e=await c.A.findOne({where:{imageUrl:n.imageURL}});e&&await e.destroy()}await n.destroy(),s.status(200).json({message:"Post deleted successfully"})}))}catch(e){console.error("Error deleting post:",e),s.status(500).json({message:"Internal server error"})}},C=async(e,s)=>{try{const{page:t=0,limit:a=10}=e.query,r=t?parseInt(t,10)*parseInt(a,10):0,o=await u.A.findAndCountAll({limit:parseInt(a,10),offset:r,order:[["created_At","DESC"]]});s.status(200).json({posts:o,page:parseInt(t,10),totalPages:Math.ceil(o.count/parseInt(a,10)),totalCount:o.count})}catch(e){console.error("Error getting posts:",e),s.status(500).json({message:"Internal server error"})}},v=async(e,s)=>{try{const{searchValue:t}=e.body,a=await u.A.findAll({where:{caption:{[E.Op.like]:`%${t}%`}}});s.status(200).json({posts:a})}catch(e){console.error("Error searching posts:",e),s.status(500).json({message:"Internal server error"})}};a()}catch(e){a(e)}}))},9024:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{Be:()=>p,TU:()=>g,Ub:()=>E,oC:()=>m,pH:()=>T});var r=t(818),o=t.n(r),n=t(829),i=t.n(n),c=t(3101),l=t(16),d=t(80),u=t(2300),y=e([d]);d=(y.then?(await y)():y)[0],o().config();const g=async(e,s)=>{try{const{name:t,username:a,email:r,password:o}=e.body;if(!(t&&a&&r&&o))return(0,u.H4)(new Error("New User validation error"),s);if(await d.A.findOne({where:{email:r}}))return(0,u.H4)(new Error("UserRegistrations.email: User already exists "),s);const n=await d.A.create({newUser:t,username:a,email:r,hashedpassword:o,createdAt:new Date}),i=(0,l.Jj)({id:n.id});s.cookie("jwt",i,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.status(201).json({id:n.id,name:n.newUser,username:n.username,email:n.email,token:i})}catch(e){(0,u.H4)(e,s)}},T=async(e,s)=>{try{const{email:t,password:a}=e.body;if(!t||!a)return(0,u.H4)(new Error("Login Validation Error!"),s);const r=await d.A.loginUser(t,a);if(!r)throw new Error("User not found");const o=(0,l.Jj)({id:r.id}),n=(0,l.v3)({id:r.id});console.log("User logged in:",n),s.cookie("jwt",o,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.cookie("refreshToken",n,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.setHeader("Authorization",`Bearer ${o}`),s.locals.user=r,s.json({token:o,refreshToken:n,user:r.id})}catch(e){(0,u.H4)(e,s)}},E=async(e,s)=>{try{const t=e.cookies.jwt,a=e.cookies.refreshToken;if(!t&&!a)return void s.status(400).json({message:"No tokens provided!"});s.cookie("jwt","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),s.cookie("refreshToken","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),s.status(200).json({message:"User logged out"})}catch(e){(0,u.H4)(e,s)}},p=async(e,s)=>{const t=e.cookies.refreshToken;t?i().verify(t,c.n.JWT_REFRESH_SECRET,(async(e,t)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});try{const e=t.id;if(console.log("User ID:",e),!e)return void s.status(400).json({message:"User ID is required"});const a=await d.A.findByPk(e);if(!a)return s.status(404).json({message:"User not found"});const r=i().sign({id:a.id},c.n.JWT_SECRET,{expiresIn:c.n.JWT_EXPIRES_IN,algorithm:c.n.JWT_ALGORITHM,issuer:c.n.JWT_ISSUER});s.cookie("jwt",r,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.status(200).json({token:r,user:a.id})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}})):s.status(401).json({message:"Unauthorized"})},m=(e,s,t)=>{const a=e.cookies.jwt;a?(i().verify(a,c.n.JWT_SECRET,(async(e,a)=>{if(e)return console.log(e.message),s.status(401).json({message:"Unauthorized"});const r=a.id,o=await d.A.findByPk(r);return o?(s.locals.user=o,t()):s.status(404).json({message:"User not found"})})),t()):s.status(401).json({message:"Unauthorized"})};a()}catch(e){a(e)}}))},2993:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>l});var r=t(5595),o=t(829),n=t.n(o),i=(t(4469),t(6153)),c=e([r,i]);[r,i]=c.then?(await c)():c;const l=async(e,s)=>{try{const t=e.cookies.jwt;if(!t)return void s.status(401).json({message:"Unauthorized"});n().verify(t,process.env.JWT_SECRET,(async(e,t)=>{if(e)return void s.status(401).json({message:"Unauthorized"});const a=t.id;if(!a)return void s.status(401).json({message:"Unauthorized"});if(!await i.A.findByPk(a))return void s.status(401).json({message:"Unauthorized"});const o=await r.A.findImageByReferenceKey("user_id",a);o?s.status(200).json({imageUrl:o.imageUrl}):s.status(200).json({message:"No image found"})}))}catch(e){throw console.error("Error getting image preview:",e),new Error("Failed to get image preview")}};a()}catch(e){a(e)}}))},2785:(e,s,t)=>{t.d(s,{TA:()=>n});var a=t(1763),r=t.n(a),o=t(9469);const n=r()({windowMs:o._.RARE_LIMIT_WINDOW_MS,max:o._.MAX,message:o._.RARE_LIMIT_MESSAGE,statusCode:o._.RARE_LIMIT_CODE,handler:(e,s)=>{s.status(o._.RARE_LIMIT_CODE).json({message:o._.RARE_LIMIT_MESSAGE})},keyGenerator:async(e,s)=>e.ip?e.ip.replace(/:\d+[^:]*$/,""):(s.status(500).send({message:"Warning: request.ip is missing!"}),e.socket.remoteAddress)})},16:(e,s,t)=>{t.d(s,{Jj:()=>c,v3:()=>l});var a=t(818),r=t.n(a),o=t(829),n=t.n(o),i=t(3101);r().config();const c=e=>{try{return n().sign(e,i.n.JWT_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}},l=e=>{try{return n().sign(e,i.n.JWT_REFRESH_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_REFRESH_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}}},2051:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{FH:()=>y,oC:()=>u});var r=t(818),o=t.n(r),n=t(829),i=t.n(n),c=t(3101),l=t(6153),d=e([l]);l=(d.then?(await d)():d)[0],o().config();const u=async(e,s,t)=>{try{const a=e.cookies.jwt;a?i().verify(a,c.n.JWT_SECRET,(async(e,a)=>{if(e)console.log(e.message),s.locals.user=null;else try{const e=await l.A.findByPk(a.id);s.locals.user=e}catch(e){console.error("Error retrieving user:",e),s.locals.user=null}t()})):(s.locals.user=null,t())}catch(e){console.error("Error checking user:",e),s.locals.user=null,t()}},y=async(e,s,t)=>{try{const a=e.cookies.jwt;if(!a)return s.locals.user=null,t();i().verify(a,c.n.JWT_SECRET,(async(e,a)=>{if(e)return console.error("JWT verification error:",e.message),s.locals.user=null,t();try{const e=await l.A.findByPk(a.id);console.log("decodedToken:",a),s.locals.user=e||null}catch(e){console.error("Error retrieving user:",e),s.locals.user=null}t()}))}catch(e){console.error("Error verifying user:",e),s.locals.user=null,t()}};a()}catch(e){a(e)}}))},1125:(e,s,t)=>{t.d(s,{r:()=>r});var a=t(128);async function r(){const e=(0,a.J)();let s=0;for(;s<10;)try{return await e.authenticate(),console.log("Database connection established, Starting Server....."),await e.sync({force:!0}),console.log("Drop and re-sync db."),e}catch(e){console.error("Database connection failed:",e),s++,await new Promise((e=>setTimeout(e,1e3)))}throw console.error("Max attempts reached, database connection failed"),new Error("Database connection failed")}},128:(e,s,t)=>{t.d(s,{J:()=>c});var a=t(9031),r=t(3085),o=t(3024),n=t.n(o);const i={Dialect:"mariadb",host:r.L.DB_HOST||"localhost",username:r.L.DB_USER||"metalbrain",password:r.L.DB_PASS||"password",database:r.L.DB_NAME||"FindSomeOne",socketPath:r.L.DB_SOCKET_PATH||"/var/run/mysqld/mysqld.sock",socketTimeout:r.L.DB_SOCKET_TIMEOUT||1e3,compress:r.L.DB_COMPRESS||!1,debug:r.L.DB_DEBUG||!1,permitLocalInfile:r.L.DB_PERMIT_LOCAL_INFILE||!1,trace:r.L.DB_TRACE||!0,checkDuplicate:r.L.DB_CHECK_DUPLICATE||!1,connectAttributes:JSON.parse(r.L.DB_CONNECTION_ATTRIBUTES||"{}"),connectionTimeout:r.L.DB_CONNECTION_TIMEOUT||1e3,port:r.L.DB_PORT||3306,ssl:r.L.DB_SSL||!1,dialectOptions:{ssl:{ca:r.L.DB_SSL_CA?n().readFileSync(r.L.DB_SSL_CA).toString():"",key:r.L.DB_SSL_KEY?n().readFileSync(r.L.DB_SSL_KEY).toString():"",cert:r.L.DB_SSL_CERT?n().readFileSync(r.L.DB_SSL_CERT).toString():""}}};function c(){return new a.Sequelize(i.database,i.username,i.password,{host:i.host,dialect:i.Dialect,port:i.port,ssl:i.ssl,dialectOptions:i.dialectOptions})}},3121:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>l});var r=t(423),o=t(5520),n=t(3136),i=t(6760),c=t(3085);const e=(0,i.dirname)((0,n.fileURLToPath)("file:///home/babsdevsys/appV-1/src/server/loaders/dataLoader/sequlize.ts")),l=new r.Sequelize({dialect:o.MariaDbDialect,host:c.L.DB_HOST,user:c.L.DB_USER,password:c.L.DB_PASS,database:c.L.DB_NAME,port:c.L.DB_PORT,ssl:c.L.DB_SSL,models:await(0,r.importModels)(e+"/src/server/models/**/*.model.{ts,js}")});a()}catch(e){a(e)}}),1)},6633:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>w});var r=t(7252),o=t.n(r),n=t(6898),i=t.n(n),c=t(3268),l=t.n(c),d=t(2525),u=t.n(d),y=t(2096),g=t.n(y),T=t(9469),E=t(4388),p=t(2785),m=t(2300),_=t(6928),h=t.n(_),f=e([E]);async function w({app:e}){e.get("/status",((e,s)=>s.sendStatus(200).end())),e.use(((e,s,t)=>(s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),"OPTIONS"===e.method?s.sendStatus(204):t()))),e.use(l().urlencoded({extended:!0})),e.use(o().json()),e.use(o().urlencoded({extended:!0})),e.use(i()()),e.use(l().json()),e.use(o().static(h().join(__dirname,"dist")));const s=T._.TRUST_PROXY||"false",t=T._.NUMBER_OF_PROXIES||1;return s?e.set("trust proxy",!0):"false"===s?e.set("trust proxy",!1):(e.set("trust proxy",s),e.set("trust proxy",t)),e.set("trust proxy",t),e.get("/ip",((e,s)=>s.send(e.ip))),e.use(u()({contentSecurityPolicy:!1})),e.use(g()(T._.MORGAN)),e.use(p.TA),e.use(E.Q),e.use(m.sh),e}E=(f.then?(await f)():f)[0],a()}catch(S){a(S)}}))},1545:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.r(s),t.d(s,{default:()=>d});var r=t(6633),o=t(3121),n=t(1125),i=t(2541),c=t(2273),l=e([r,o,i]);async function d({app:e}){await(0,i.K)(),await(0,n.r)(),o.A,await(0,r.A)({app:e}),(0,c.A)(),console.log("Express Server Intialized!")}[r,o,i]=l.then?(await l)():l,a()}catch(u){a(u)}}))},5595:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>u});var r=t(9031),o=t(128),n=t(6153),i=t(452),c=e([n,i]);[n,i]=c.then?(await c)():c;const l=(0,o.J)();class d extends r.Model{static async findImageById(e){return await this.findByPk(e)}static async findImageByReferenceKey(e,s){try{return await this.findOne({where:{[e]:s},order:[["created_At","DESC"]]})}catch(t){throw console.error(`Error finding image by reference key: ${e}, value: ${s}`,t),t}}}d.init({id:{type:r.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},imageUrl:{type:r.DataTypes.STRING,allowNull:!0},user_id:{type:r.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:r.DataTypes.INTEGER,references:{model:"Posts",key:"id"}},created_At:{type:r.DataTypes.DATE,allowNull:!1,defaultValue:r.DataTypes.NOW}},{sequelize:l,modelName:"ImageStorages",timestamps:!1}),d.init({id:{type:r.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},imageUrl:{type:r.DataTypes.STRING,allowNull:!0},user_id:{type:r.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:r.DataTypes.INTEGER,references:{model:"Posts",key:"id"},allowNull:!0},created_At:{type:r.DataTypes.DATE,allowNull:!1,defaultValue:r.DataTypes.NOW}},{sequelize:l,modelName:"ImageStorages",timestamps:!1}),d.afterCreate((async e=>{const s=await n.A.findByPk(e.user_id);s&&(s.imageURL=e.imageUrl,await s.save())})),n.A.hasMany(d,{foreignKey:"user_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),i.A.hasMany(d,{foreignKey:"post_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),d.belongsTo(n.A,{foreignKey:"user_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),d.belongsTo(i.A,{foreignKey:"post_id",onDelete:"CASCADE",onUpdate:"CASCADE"}),await l.sync({force:!1}).then((()=>{console.log("New Image synced successfully")})).catch((e=>{console.error("Error syncing new image:",e)}));const u=d;a()}catch(e){a(e)}}),1)},8995:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>u});var r=t(9031),o=t(128),n=t(6153),i=t(452),c=e([n,i]);[n,i]=c.then?(await c)():c;const l=(0,o.J)();class d extends r.Model{static async createLike(e){return await this.create(e)}static async findLikeById(e){return await this.findByPk(e)}static async findLikeByReferenceKey(e,s){return await this.findOne({where:{[e]:s}})}static async findAllLikesByReferenceKey(e,s){return await this.findAll({where:{[e]:s}})}static async deleteLikeByReferenceKey(e,s){await this.destroy({where:{[e]:s}})}}d.init({id:{type:r.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},user_id:{type:r.DataTypes.INTEGER,allowNull:!1,references:{model:"Users",key:"id"}},post_id:{type:r.DataTypes.INTEGER,allowNull:!1,references:{model:"Posts",key:"id"}},created_At:{type:r.DataTypes.DATE,allowNull:!0}},{sequelize:l,modelName:"Likes",timestamps:!1,freezeTableName:!0}),n.A.hasMany(d,{foreignKey:"user_id",onDelete:"CASCADE"}),d.belongsTo(n.A,{foreignKey:"user_id"}),i.A.hasMany(d,{foreignKey:"post_id",onDelete:"CASCADE"}),d.belongsTo(i.A,{foreignKey:"post_id"}),d.sync({force:!1}).then((()=>{console.log("Like synced successfully")})).catch((e=>{console.error("Error syncing like:",e)}));const u=d;a()}catch(e){a(e)}}))},452:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>d});var r=t(9031),o=t(128),n=t(6153),i=e([n]);n=(i.then?(await i)():i)[0];const c=(0,o.J)();class l extends r.Model{static async createPost(e){return await this.create(e)}static async updatePost(e,s){const[t,a]=await this.update(s,{where:{id:e},returning:!0});return[t,a]}static async deletePost(e){const s=await this.findOne({where:{id:e}});s&&await s.destroy()}static async getAllPosts(){return await this.findAll()}static async getInfinitePosts(e,s){return await this.findAll({offset:e,limit:s})}static async getPostByID(e){return await this.findOne({where:{id:e}})}}l.init({id:{type:r.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},caption:{type:r.DataTypes.STRING,allowNull:!1},imageURL:{type:r.DataTypes.STRING,allowNull:!0},location:{type:r.DataTypes.STRING,allowNull:!0},tags:{type:r.DataTypes.STRING,allowNull:!1},likes_Count:{type:r.DataTypes.INTEGER,allowNull:!0},created_At:{type:r.DataTypes.DATE,allowNull:!0},creator_Id:{type:r.DataTypes.INTEGER,allowNull:!1,references:{model:"Users",key:"id"}}},{sequelize:c,modelName:"Posts",timestamps:!1}),l.createPost=async function(e){try{return await this.create(e)}catch(e){throw console.error("Error creating new post:",e),e}},l.updatePost=async function(e,s){try{const[t,a]=await this.update(s,{where:{id:e},returning:!0});return[t,a]}catch(e){throw console.error("Error updating post:",e),e}},l.getInfinitePosts=async function(e,s){try{return await this.findAll({offset:e,limit:s})}catch(e){throw console.error("Error getting infinite posts:",e),e}},l.getPostByID=async function(e){try{return await this.findOne({where:{id:e}})}catch(e){throw console.error("Error getting post by ID:",e),e}},n.A.hasMany(l,{foreignKey:"creator_Id",onDelete:"CASCADE",onUpdate:"CASCADE"}),l.belongsTo(n.A,{foreignKey:"creator_Id",onDelete:"CASCADE",onUpdate:"CASCADE"}),await c.sync({force:!1}).then((()=>{console.log("Post synced successfully")})).catch((e=>{console.error("Error syncing Post:",e)}));const d=l;a()}catch(e){a(e)}}),1)},581:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>u});var r=t(9031),o=t(128),n=t(6153),i=t(452),c=e([n,i]);[n,i]=c.then?(await c)():c;const l=(0,o.J)();class d extends r.Model{static async createSave(e){return await this.create(e)}static async checkIfSaved(e,s){return!!await this.findOne({where:{user_id:e,post_id:s}})}static async deleteSavedPost(e){const s=await this.findOne({where:{post_id:e}});s&&await s.destroy()}}d.init({id:{type:r.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0,allowNull:!1},user_id:{type:r.DataTypes.INTEGER,references:{model:"Users",key:"id"}},post_id:{type:r.DataTypes.INTEGER,references:{model:"Posts",key:"id"}},saveDate:{type:r.DataTypes.DATE,allowNull:!0,defaultValue:r.DataTypes.NOW}},{sequelize:l,tableName:"Saves",timestamps:!1,freezeTableName:!0}),d.deleteSavedPost=async function(e){const s=await this.findOne({where:{post_id:e}});s&&await s.destroy()},d.belongsTo(n.A,{foreignKey:"user_id",targetKey:"id"}),d.belongsTo(i.A,{foreignKey:"post_id",targetKey:"id"}),d.sync({force:!1}).then((()=>{console.log("Save Post synced successfully")})).catch((e=>{console.error("Error syncing Save post:",e)}));const u=d;a()}catch(e){a(e)}}))},6153:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>n});var r=t(9031);const e=(0,t(128).J)();class o extends r.Model{static async getUserByID(e){return await this.findOne({where:{id:e}})}}o.init({id:{type:r.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},firstName:{type:r.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},lastName:{type:r.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},username:{type:r.DataTypes.STRING,allowNull:!1,unique:!0,validate:{is:/^[a-zA-Z0-9_]*$/,len:[3,20]}},email:{type:r.DataTypes.STRING,unique:!0,allowNull:!1,validate:{isEmail:!0,len:[5,50],notEmpty:!0}},hashedpassword:{type:r.DataTypes.STRING(64)},status:{type:r.DataTypes.STRING,allowNull:!1,defaultValue:"unverified"},bio:{type:r.DataTypes.STRING,defaultValue:"This is a new user."},join:{type:r.DataTypes.DATE,defaultValue:r.DataTypes.NOW},avatarUrl:{type:r.DataTypes.STRING},imageURL:{type:r.DataTypes.STRING},profilePic:{type:r.DataTypes.STRING},label:{type:r.DataTypes.STRING,defaultValue:"New User"},last_activity:{type:r.DataTypes.DATE,defaultValue:r.DataTypes.NOW},updated_at:{type:r.DataTypes.DATE,defaultValue:r.DataTypes.NOW},UserRegistrationID:{type:r.DataTypes.UUID,allowNull:!0,references:{model:"UserRegistration",key:"id"}}},{sequelize:e,modelName:"Users",timestamps:!1,updatedAt:"updated_at"}),await e.sync({force:!1}).then((()=>{console.log("New User synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const n=o;a()}catch(e){a(e)}}),1)},80:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>g});var r=t(9031),o=t(128),n=t(5486),i=t.n(n),c=t(8635),l=t(6153),d=e([l]);l=(d.then?(await d)():d)[0];const u=(0,o.J)();class y extends r.Model{static async loginUser(e,s){return await this.findOne({where:{email:e,hashedpassword:s}})}static async logoutUser(e){return await this.findOne({where:{email:e}})}static async resetPassword(e,s){return await this.findOne({where:{email:e,hashedpassword:s}})}}y.init({id:{type:r.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},newUser:{type:r.DataTypes.STRING,allowNull:!1},username:{type:r.DataTypes.STRING,allowNull:!1},email:{type:r.DataTypes.STRING,allowNull:!1},hashedpassword:{type:r.DataTypes.STRING,allowNull:!1},createdAt:{type:r.DataTypes.DATE,allowNull:!1,defaultValue:r.DataTypes.NOW}},{sequelize:u,modelName:"UserRegistration",createdAt:"createdAt",timestamps:!1,freezeTableName:!0}),y.beforeCreate((async e=>{try{if(e){const s=i().genSaltSync(10),t=await i().hash(String(e.hashedpassword),s);e.hashedpassword=t}}catch(e){throw console.error("Error hashing password:",e),new Error("Error hashing password")}})),y.afterCreate((async e=>{try{if(e){const s=e.newUser?.lastIndexOf(" "),t=-1!==s?e.newUser?.slice(0,s):e.newUser,a=-1!==s?e.newUser?.slice(s??1):"",r=(0,c.q)(e.username);await l.A.upsert({firstName:t,lastName:a,username:e.username,email:e.email,hashedpassword:e.hashedpassword,status:"unverified",bio:"I am a new user.",join:new Date,avatarUrl:r,imageURL:null,profilePic:null,label:"New User",last_activity:new Date,updated_at:new Date,UserRegistrationID:e.id})}}catch(e){throw console.error("Error registering new user:",e),new Error("Error registering new user")}})),y.loginUser=async function(e,s){try{const t=await this.findOne({where:{email:e}});if(t){if(await i().compare(s,t.hashedpassword))return t;throw new Error("Incorrect password")}throw new Error("Incorrect email")}catch(e){throw console.error("Error logging in user:",e),new Error("User not found")}},y.logoutUser=async function(e){try{return await this.findOne({where:{email:e}})}catch(e){throw console.error("Error logging out user:",e),new Error("User not found")}},await u.sync({force:!1}).then((()=>{console.log("New User Registered synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const g=y;a()}catch(e){a(e)}}),1)},2317:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>p});var r=t(7252),o=t.n(r),n=t(8577),i=t.n(n),c=t(1976),l=t(9024),d=t(3268),u=t.n(d),y=t(6898),g=t.n(y),T=e([l]);l=(T.then?(await T)():T)[0];const E=o().Router();E.use(i()(c.v)),E.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),E.use(u().urlencoded({extended:!0})),E.use(g()()),E.use(o().json()),E.use(u().json()),E.post("/api/register",l.TU),E.post("/api/login",l.pH),E.get("/api/logout",l.Ub),E.post("/api/refresh-token",l.Be),E.get("/api/currentUser",l.oC);const p=E;a()}catch(e){a(e)}}))},6010:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>w});var r=t(818),o=t.n(r),n=t(7252),i=t.n(n),c=t(8577),l=t.n(c),d=t(6153),u=t(3268),y=t.n(u),g=t(6898),T=t.n(g),E=t(2051),p=t(829),m=t.n(p),_=t(3101),h=e([d,E]);[d,E]=h.then?(await h)():h;const f=i().Router();o().config(),f.use(l()()),f.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),f.use(y().urlencoded({extended:!0})),f.use(T()()),f.use(i().json()),f.use(y().json()),f.get("/api/getUser",E.FH,(async(e,s,t)=>{const a=e.cookies.jwt;a?m().verify(a,_.n.JWT_SECRET,(async(e,a)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});try{const e=await d.A.findByPk(a.id);if(!e)return void s.status(400).json({message:"User ID is required"});s.status(200).json({user:e})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}return t()})):s.status(401).json({message:"Unauthorized"})}));const w=f;a()}catch(e){a(e)}}))},8358:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>I});var r=t(818),o=t.n(r),n=t(7252),i=t.n(n),c=t(8577),l=t.n(c),d=t(1976),u=t(3268),y=t.n(u),g=t(6898),T=t.n(g),E=t(6020),p=t(2993),m=t(5595),_=t(829),h=t.n(_),f=t(6153),w=t(3101),S=e([p,m,f]);[p,m,f]=S.then?(await S)():S,o().config();const A=i().Router();A.use(l()(d.v)),A.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),s.header("encoding","multipart/form-data"),t()})),A.use(y().urlencoded({extended:!0})),A.use(T()()),A.use(i().json()),A.use(y().json()),A.post("/api/uploadImage",E.A.single("image"),(async(e,s)=>{try{console.log("File uploaded:",e.file);const t=`assets/images/${e.file?.filename}`,a=e.cookies.jwt,r=parseInt(e.body.postId,10);if(!a)return void s.status(401).json({message:"Unauthorized"});h().verify(a,w.n.JWT_SECRET,(async(e,a)=>{if(e)return void s.status(401).json({message:"Unauthorized"});const o=a.id;o&&await f.A.findByPk(o)?await m.A.create({imageUrl:t,user_id:o||null,post_id:r||null,created_At:new Date})?s.status(200).json({message:"Image uploaded successfully",imageUrl:t}):s.status(500).send({error:"Error creating image record"}):s.status(401).json({message:"Unauthorized"})}))}catch(e){console.error("Error uploading image:",e),s.status(500).json({message:"Internal server error"})}})),A.get("/api/sendImageUrl",p.A);const I=A;a()}catch(e){a(e)}}))},9785:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>p});var r=t(7252),o=t.n(r),n=t(8577),i=t.n(n),c=t(6898),l=t.n(c),d=t(3268),u=t.n(d),y=t(6184),g=t(2051),T=e([y,g]);[y,g]=T.then?(await T)():T;const E=o().Router();E.use(i()()),E.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),E.use(u().urlencoded({extended:!0})),E.use(l()()),E.use(o().json()),E.use(u().json()),E.post("/api/createPost",y.pD),E.put("/api/updatePost",y.gg),E.delete("/api/deletePost",y.ys),E.get("/api/getAllPosts",y.zX),E.get("/api/getPostById",y.tY),E.post("/api/likePost",y.kL),E.post("/api/savePost",g.FH,y.E0),E.delete("/api/deleteSavedPost",y.Zv),E.delete("/api/deleteLikePost",y.zh),E.get("/api/getInfinitePosts",y.Eu),E.get("/api/searchPosts",y.CI);const p=E;a()}catch(e){a(e)}}))},4388:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{Q:()=>m});var r=t(7252),o=t.n(r),n=t(9469),i=t(2317),c=t(6010),l=t(4704),d=t(3268),u=t.n(d),y=t(6898),g=t.n(y),T=t(9785),E=t(8358),p=e([i,c,l,T,E]);[i,c,l,T,E]=p.then?(await p)():p;const m=o().Router();m.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),m.use(u().urlencoded({extended:!0})),m.use(g()()),m.use(o().json()),m.use(u().json()),m.get("/",((e,s)=>{s.send({status:`${n._.NODE_ENV}`,message:`${n._.RESPONSE_STATUS}`,name:`${n._.APP_NAME}`})})),m.use(i.A),m.use(l.A),m.use(T.A),m.use(E.A),m.use(c.A),a()}catch(e){a(e)}}))},4704:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{A:()=>h});var r=t(7252),o=t.n(r),n=t(8577),i=t.n(n),c=t(3268),l=t.n(c),d=t(6898),u=t.n(d),y=t(829),g=t.n(y),T=t(6153),E=t(3101),p=t(2051),m=e([T,p]);[T,p]=m.then?(await m)():m;const _=o().Router();_.use(i()()),_.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),_.use(l().urlencoded({extended:!0})),_.use(u()()),_.use(o().json()),_.use(l().json()),_.get("/api/getCurrentUser",p.oC,(async(e,s,t)=>{const a=e.cookies.jwt;a?g().verify(a,E.n.JWT_SECRET,(async(e,a)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});try{const e=a.id;if(!e)return void s.status(400).json({message:"User ID is required"});if(!await T.A.findByPk(e))return s.status(404).json({message:"User not found"})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Internal server error"})}return t()})):s.status(401).json({message:"Unauthorized"})}));const h=_;a()}catch(e){a(e)}}))},6020:(e,s,t)=>{t.d(s,{A:()=>y});var a=t(8461),r=t.n(a),o=t(6928),n=t.n(o),i=t(7189),c=t(9896),l=t.n(c);const d="/home/babsdevsys/appV-1/public/assets/images";l().existsSync(d)||l().mkdirSync(d,{recursive:!0});const u=r().diskStorage({destination:function(e,s,t){t(null,d)},filename:function(e,s,t){const a=Date.now()+"-"+Math.round(1e9*Math.random());t(null,s.fieldname+"-"+a+n().extname(s.originalname))}}),y=r()({storage:u,limits:{fileSize:1e7},fileFilter:function(e,s,t){const a=/jpeg|jpg|png|svg/,r=a.test(s.mimetype),o=a.test(n().extname(s.originalname).toLowerCase());if(r&&o)return t(null,!0);(async(e,s)=>{try{if(!(await(0,i.validateMIMEType)(e.path,{originalFilename:e.originalname,allowMimeTypes:["image/jpeg","image/png","image/svg+xml"]})).ok)return s(new Error("Invalid file type"));s(null,!0)}catch(e){console.error("Error validating file type:",e),s(new Error("Error validating file type"))}})(s.path,t)}})},2273:(e,s,t)=>{t.d(s,{A:()=>o});var a=t(643);function r(){return new Promise((e=>{setTimeout((()=>{e()}),1e3)}))}new a.PerformanceObserver((e=>{e.getEntries().forEach((e=>{console.log(`${e.name}: ${e.duration}ms`)})),a.performance.clearMarks()})).observe({type:"measure"});const o=async function(){try{a.performance.mark("Loader Start",{detail:"Loader started"}),await r(),a.performance.mark("Task 1 End",{detail:"Task 1 completed"}),await r(),a.performance.mark("Task 2 End",{detail:"Task 2 completed"});const e=a.performance.measure("Task 2 Duration","Task 1 End","Task 2 End");console.log(e.duration),a.performance.mark("Loader End"),a.performance.measure("Total Loader Duration","Loader Start","Loader End")}catch(e){console.error("Error in loader:",e)}}},2541:(e,s,t)=>{t.a(e,(async(e,a)=>{try{t.d(s,{K:()=>c});var r=t(128),o=t(5595),n=e([o]);o=(n.then?(await n)():n)[0];const i=(0,r.J)();async function c(){const e=await i.transaction();try{await o.A.truncate({transaction:e}),await e.commit(),console.log("Tables have been truncated...")}catch(s){await e.rollback(),console.error("Error truncating tables:",s)}}a()}catch(l){a(l)}}))},8635:(e,s,t)=>{function a(e){const s=e.split(" ").map((e=>e.charAt(0).toUpperCase())).join("");return`https://ui-avatars.com/api/?name=${encodeURIComponent(s)}&size=200&background=random&color=fff`}t.d(s,{q:()=>a}),t(6982)},2300:(e,s,t)=>{t.d(s,{H4:()=>c,sh:()=>u});var a=t(1708),r=t.n(a),o=t(9896),n=t.n(o),i=t(9469);const c=(e,s)=>{console.error(e.message);let t={};e.message.includes("New User validation error")&&(t={name:"Name is required",username:"username is required",email:"email is required",password:"password is required"}),e.message.includes("UserRegistrations.email")&&(t.email="Email is already registered"),e.message.includes("incorrect email")&&(t.email="email is not registered"),e.message.includes("Incorrect password")&&(t.password="password is incorrect"),"SequelizeValidationError"===e.name&&e.error&&(t=e.error.reduce(((e,s)=>(e[s.path]=s.message,e)),{})),s.status(e.code||500).json({errors:t})};function l(e){const s=`${(new Date).toISOString()} - ${e.message}\n${e.stack}\n`;n().appendFileSync("error.log",s)}const d=new Map;function u(e,s,t,a){l(e),t.status(500).json({message:"An unexpected error occurred"}),a(e)}r().on("unhandledRejection",((e,s)=>{console.error("Unhandled Rejection at:",s,"reason:",e),d.set(s,e)})),r().on("rejectionHandled",(e=>{d.delete(e)})),r().on("unhandledRejection",((e,s)=>{l(e),console.error("Unhandled Rejection at:",s,"reason:",e),r().exit(1)})),r().on("uncaughtException",(e=>{l(e),console.error("Uncaught Exception:",e),r().exit(1)})),r().on("uncaughtException",(e=>{n().writeSync(r().stderr.fd,`Caught exception: ${e}\nException Origin: ${origin}\n`)})),setTimeout((()=>{console.log("This will still run.")}),i._.ERROR_TIMEOUT)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,