"use strict";exports.id=545,exports.ids=[545],exports.modules={976:(e,s,t)=>{t.d(s,{v:()=>u});var r=t(613);const n=(0,t(546).load)({CORS_ORIGIN:String,CORS_OPTIONS_SUCCESS_STATUS:Number,CORS_CREDENTIALS:Boolean,CORS_METHODS:String}),{CORS_ORIGIN:a,CORS_OPTIONS_SUCCESS_STATUS:o,CORS_CREDENTIALS:i,CORS_METHODS:c}=n;r.strict.ok(a,"CORS origin should be present"),r.strict.ok(o,"CORS options success status should be present"),r.strict.ok(i,"CORS credentials should be present"),r.strict.ok(c,"CORS methods should be present");const l={CORS_ORIGIN:a,CORS_OPTIONS_SUCCESS_STATUS:o,CORS_CREDENTIALS:i,CORS_METHODS:c};t(818).config();const u={origin:l.CORS_ORIGIN,methods:l.CORS_METHODS,credentials:l.CORS_CREDENTIALS,optionsSuccessStatus:l.CORS_OPTIONS_SUCCESS_STATUS}},85:(e,s,t)=>{t.d(s,{L:()=>m});var r=t(613);const n=(0,t(546).load)({DB_HOST:String,DB_PORT:Number,DB_USER:String,DB_PASS:String,DB_NAME:String,DB_SOCKET_PATH:String,DB_SOCKET_TIMEOUT:Number,DB_COMPRESS:Boolean,DB_DEBUG:Boolean,DB_PERMIT_LOCAL_INFILE:Boolean,DB_TRACE:Boolean,DB_CHECK_DUPLICATE:Boolean,DB_SSL:Boolean,DB_SSL_CA:String,DB_SSL_KEY:String,DB_SSL_CERT:String,DB_CONNECTION_ATTRIBUTES:String,DB_CONNECTION_TIMEOUT:Number}),{DB_HOST:a,DB_PORT:o,DB_USER:i,DB_PASS:c,DB_NAME:l,DB_SOCKET_PATH:u,DB_SOCKET_TIMEOUT:d,DB_COMPRESS:T,DB_DEBUG:E,DB_PERMIT_LOCAL_INFILE:_,DB_TRACE:S,DB_CHECK_DUPLICATE:h,DB_SSL:p,DB_SSL_CA:g,DB_SSL_KEY:R,DB_SSL_CERT:y,DB_CONNECTION_ATTRIBUTES:A,DB_CONNECTION_TIMEOUT:O}=n;r.strict.ok(a,"Database host should be present"),r.strict.ok(o,"Database port should be present"),r.strict.ok(i,"Database user should be present"),r.strict.ok(c,"Database password should be present"),r.strict.ok(l,"Database name should be present");const m={DB_HOST:a,DB_PORT:o,DB_USER:i,DB_PASS:c,DB_NAME:l,DB_SOCKET_PATH:u,DB_SOCKET_TIMEOUT:d,DB_COMPRESS:T,DB_DEBUG:E,DB_PERMIT_LOCAL_INFILE:_,DB_TRACE:S,DB_CHECK_DUPLICATE:h,DB_CONNECTION_ATTRIBUTES:A,DB_CONNECTION_TIMEOUT:O,DB_SSL:p,DB_SSL_CA:g,DB_SSL_KEY:R,DB_SSL_CERT:y}},101:(e,s,t)=>{t.d(s,{n:()=>p});var r=t(613);const n=(0,t(546).load)({JWT_SECRET:String,JWT_EXPIRES_IN:String,JWT_REFRESH_SECRET:String,JWT_REFRESH_EXPIRES_IN:String,JWT_REFRESH_MAX_AGE:Number,JWT_ALGORITHM:String,JWT_ISSUER:String,JWT_MAX_AGE:Number,JWT_HTTP_ONLY:Boolean,JWT_SAME_SITE:String,JWT_COOKIE_NAME:String,JWT_SECURE:Boolean}),{JWT_SECRET:a,JWT_EXPIRES_IN:o,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:l,JWT_ALGORITHM:u,JWT_ISSUER:d,JWT_MAX_AGE:T,JWT_HTTP_ONLY:E,JWT_SAME_SITE:_,JWT_COOKIE_NAME:S,JWT_SECURE:h}=n;r.strict.ok(a,"JWT secret should be present"),r.strict.ok(o,"JWT expires in should be present"),r.strict.ok(i,"JWT refresh secret should be present"),r.strict.ok(c,"JWT refresh expires in should be present"),r.strict.ok(u,"JWT algorithm should be present"),r.strict.ok(d,"JWT issuer should be present"),r.strict.ok(T,"JWT max age should be present"),r.strict.ok(E,"JWT http only should be present"),r.strict.ok(_,"JWT same site should be present"),r.strict.ok(S,"JWT cookie name should be present"),r.strict.ok(h,"JWT secure should be present"),r.strict.ok(l,"JWT refresh max age should be present");const p={JWT_SECRET:a,JWT_EXPIRES_IN:o,JWT_REFRESH_SECRET:i,JWT_REFRESH_EXPIRES_IN:c,JWT_REFRESH_MAX_AGE:l,JWT_ALGORITHM:u,JWT_ISSUER:d,JWT_MAX_AGE:T,JWT_HTTP_ONLY:E,JWT_SAME_SITE:_,JWT_COOKIE_NAME:S,JWT_SECURE:h}},24:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{Be:()=>h,TU:()=>E,Ub:()=>S,oC:()=>p,pH:()=>_});var n=t(818),a=t.n(n),o=t(829),i=t.n(o),c=t(101),l=t(16),u=t(80),d=t(300),T=e([u]);u=(T.then?(await T)():T)[0],a().config();const E=async(e,s)=>{try{const{name:t,username:r,email:n,password:a}=e.body;if(!(t&&r&&n&&a))return(0,d.H4)(new Error("New User validation error"),s);if(await u.A.findOne({where:{email:n}}))return(0,d.H4)(new Error("UserRegistrations.email: User already exists "),s);const o=await u.A.create({newUser:t,username:r,email:n,hashedpassword:a,createdAt:new Date}),i=(0,l.Jj)({id:o.id});s.cookie("jwt",i,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.status(201).json({id:o.id,name:o.newUser,username:o.username,email:o.email,token:i})}catch(e){(0,d.H4)(e,s)}},_=async(e,s)=>{try{const{email:t,password:r}=e.body;if(!t||!r)return(0,d.H4)(new Error("Login Validation Error!"),s);const n=await u.A.loginUser(t,r);if(!n)throw new Error("User not found");const a=(0,l.Jj)({id:n.id}),o=(0,l.v3)({id:n.id});console.log("User logged in:",o),s.cookie("jwt",a,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.cookie("refreshToken",o,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.setHeader("Authorization",`Bearer ${a}`),s.locals.user=n,s.json({token:a,refreshToken:o,user:n.id})}catch(e){(0,d.H4)(e,s)}},S=async(e,s)=>{try{const t=e.cookies.jwt,r=e.cookies.refreshToken;if(!t&&!r)return void s.status(400).json({message:"No tokens provided!"});s.cookie("jwt","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),s.cookie("refreshToken","",{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:1}),s.status(200).json({message:"User logged out"})}catch(e){(0,d.H4)(e,s)}},h=async(e,s)=>{const t=e.cookies.refreshToken;t?i().verify(t,c.n.JWT_REFRESH_SECRET,(async(e,t)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});try{const e=t.id;if(console.log("User ID:",e),!e)return void s.status(400).json({message:"User ID is required"});const r=await u.A.findByPk(e);if(!r)return s.status(404).json({message:"User not found"});const n=i().sign({id:r.id},c.n.JWT_SECRET,{expiresIn:c.n.JWT_EXPIRES_IN,algorithm:c.n.JWT_ALGORITHM,issuer:c.n.JWT_ISSUER});s.cookie("jwt",n,{httpOnly:c.n.JWT_HTTP_ONLY,maxAge:1e3*c.n.JWT_REFRESH_MAX_AGE,secure:c.n.JWT_SECURE,sameSite:"lax"}),s.status(200).json({token:n,user:r.id})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}})):s.status(401).json({message:"Unauthorized"})},p=(e,s,t)=>{const r=e.cookies.jwt;r?(i().verify(r,c.n.JWT_SECRET,(async(e,r)=>{if(e)return console.log(e.message),s.status(401).json({message:"Unauthorized"});const n=r.id,a=await u.A.findByPk(n);return a?(s.locals.user=a,t()):s.status(404).json({message:"User not found"})})),t()):s.status(401).json({message:"Unauthorized"})};r()}catch(e){r(e)}}))},785:(e,s,t)=>{t.d(s,{TA:()=>o});var r=t(763),n=t.n(r),a=t(469);const o=n()({windowMs:a._.RARE_LIMIT_WINDOW_MS,max:a._.MAX,message:a._.RARE_LIMIT_MESSAGE,statusCode:a._.RARE_LIMIT_CODE,handler:(e,s)=>{s.status(a._.RARE_LIMIT_CODE).json({message:a._.RARE_LIMIT_MESSAGE})},keyGenerator:async(e,s)=>e.ip?e.ip.replace(/:\d+[^:]*$/,""):(s.status(500).send({message:"Warning: request.ip is missing!"}),e.socket.remoteAddress)})},16:(e,s,t)=>{t.d(s,{Jj:()=>c,gH:()=>l,v3:()=>u});var r=t(818),n=t.n(r),a=t(829),o=t.n(a),i=t(101);n().config();const c=e=>{try{return o().sign(e,i.n.JWT_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}},l=e=>{try{return o().verify(e,i.n.JWT_SECRET)}catch(e){throw new Error("Error verifying JWT")}},u=e=>{try{return o().sign(e,i.n.JWT_REFRESH_SECRET,{algorithm:i.n.JWT_ALGORITHM,expiresIn:i.n.JWT_REFRESH_EXPIRES_IN,issuer:i.n.JWT_ISSUER})}catch(e){throw new Error("Error generating JWT")}}},51:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{FH:()=>E,HW:()=>T});var n=t(818),a=t.n(n),o=t(829),i=t.n(o),c=t(101),l=t(153),u=t(16),d=e([l]);l=(d.then?(await d)():d)[0],a().config();const T=async(e,s)=>{const t=e.cookies.token;if(!t)return s.status(401).json({message:"Unauthorized"});try{const e=(0,u.gH)(t).id;if(!e)return void s.status(400).json({message:"User ID is required"});const r=await l.A.findByPk(e);if(!r)return s.status(404).json({message:"User not found"});s.status(200).json(r)}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}return t},E=async(e,s,t)=>{try{const r=e.cookies.jwt;if(!r)return s.locals.user=null,t();i().verify(r,c.n.JWT_SECRET,(async(e,r)=>{if(e)return console.error("JWT verification error:",e.message),s.locals.user=null,t();try{const e=await l.A.findByPk(r.id);console.log("decodedToken:",r),s.locals.user=e||null}catch(e){console.error("Error retrieving user:",e),s.locals.user=null}t()}))}catch(e){console.error("Error verifying user:",e),s.locals.user=null,t()}};r()}catch(e){r(e)}}))},125:(e,s,t)=>{t.d(s,{r:()=>n});var r=t(128);async function n(){const e=(0,r.J)();let s=0;for(;s<10;)try{return await e.authenticate(),console.log("Database connection established, Starting Server....."),await e.sync({force:!0}),console.log("Drop and re-sync db."),e}catch(e){console.error("Database connection failed:",e),s++,await new Promise((e=>setTimeout(e,1e3)))}throw console.error("Max attempts reached, database connection failed"),new Error("Database connection failed")}},128:(e,s,t)=>{t.d(s,{J:()=>c});var r=t(31),n=t(85),a=t(643),o=t.n(a);const i={Dialect:"mariadb",host:n.L.DB_HOST||"localhost",username:n.L.DB_USER||"metalbrain",password:n.L.DB_PASS||"password",database:n.L.DB_NAME||"FindSomeOne",socketPath:n.L.DB_SOCKET_PATH||"/var/run/mysqld/mysqld.sock",socketTimeout:n.L.DB_SOCKET_TIMEOUT||1e3,compress:n.L.DB_COMPRESS||!1,debug:n.L.DB_DEBUG||!1,permitLocalInfile:n.L.DB_PERMIT_LOCAL_INFILE||!1,trace:n.L.DB_TRACE||!0,checkDuplicate:n.L.DB_CHECK_DUPLICATE||!1,connectAttributes:JSON.parse(n.L.DB_CONNECTION_ATTRIBUTES||"{}"),connectionTimeout:n.L.DB_CONNECTION_TIMEOUT||1e3,port:n.L.DB_PORT||3306,ssl:n.L.DB_SSL||!1,dialectOptions:{ssl:{ca:n.L.DB_SSL_CA?o().readFileSync(n.L.DB_SSL_CA).toString():"",key:n.L.DB_SSL_KEY?o().readFileSync(n.L.DB_SSL_KEY).toString():"",cert:n.L.DB_SSL_CERT?o().readFileSync(n.L.DB_SSL_CERT).toString():""}}};function c(){return new r.Sequelize(i.database,i.username,i.password,{host:i.host,dialect:i.Dialect,port:i.port,ssl:i.ssl,dialectOptions:i.dialectOptions})}},121:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>l});var n=t(423),a=t(520),o=t(136),i=t(760),c=t(85);const e=(0,i.dirname)((0,o.fileURLToPath)("file:///home/babsdevsys/appV-1/src/server/loaders/dataLoader/sequlize.ts")),l=new n.Sequelize({dialect:a.MariaDbDialect,host:c.L.DB_HOST,user:c.L.DB_USER,password:c.L.DB_PASS,database:c.L.DB_NAME,port:c.L.DB_PORT,ssl:c.L.DB_SSL,models:await(0,n.importModels)(e+"/src/server/models/**/*.model.{ts,js}")});r()}catch(e){r(e)}}),1)},633:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>R});var n=t(252),a=t.n(n),o=t(898),i=t.n(o),c=t(268),l=t.n(c),u=t(525),d=t.n(u),T=t(96),E=t.n(T),_=t(469),S=t(388),h=t(785),p=t(300),g=e([S]);async function R({app:e}){e.get("/status",((e,s)=>s.sendStatus(200).end())),e.use(((e,s,t)=>(s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),"OPTIONS"===e.method?s.sendStatus(204):t()))),e.use(l().urlencoded({extended:!0})),e.use(a().json()),e.use(a().urlencoded({extended:!0})),e.use(i()()),e.use(l().json());const s=_._.TRUST_PROXY||"false",t=_._.NUMBER_OF_PROXIES||1;return s?e.set("trust proxy",!0):"false"===s?e.set("trust proxy",!1):(e.set("trust proxy",s),e.set("trust proxy",t)),e.set("trust proxy",t),e.get("/ip",((e,s)=>s.send(e.ip))),e.use(d()({contentSecurityPolicy:!1})),e.use(E()(_._.MORGAN)),e.use(h.TA),e.use(S.Q),e.use(p.sh),e}S=(g.then?(await g)():g)[0],r()}catch(y){r(y)}}))},545:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.r(s),t.d(s,{default:()=>c});var n=t(633),a=t(121),o=t(125),i=e([n,a]);async function c({app:e}){await(0,o.r)(),a.A,await(0,n.A)({app:e}),console.log("Express Intialized!")}[n,a]=i.then?(await i)():i,r()}catch(l){r(l)}}))},153:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>o});var n=t(31);const e=(0,t(128).J)();class a extends n.Model{static async getUserByID(e){return await this.findOne({where:{id:e}})}}a.init({id:{type:n.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},firstName:{type:n.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},lastName:{type:n.DataTypes.STRING,allowNull:!1,validate:{notEmpty:!0}},username:{type:n.DataTypes.STRING,allowNull:!1,unique:!0,validate:{is:/^[a-zA-Z0-9_]*$/,len:[3,20]}},email:{type:n.DataTypes.STRING,unique:!0,allowNull:!1,validate:{isEmail:!0,len:[5,50],notEmpty:!0}},hashedpassword:{type:n.DataTypes.STRING(64)},status:{type:n.DataTypes.STRING,allowNull:!1,defaultValue:"unverified"},bio:{type:n.DataTypes.STRING,defaultValue:"This is a new user."},join:{type:n.DataTypes.DATE,defaultValue:n.DataTypes.NOW},avatarUrl:{type:n.DataTypes.STRING},imageURL:{type:n.DataTypes.STRING},profilePic:{type:n.DataTypes.STRING},label:{type:n.DataTypes.STRING,defaultValue:"New User"},last_activity:{type:n.DataTypes.DATE,defaultValue:n.DataTypes.NOW},updated_at:{type:n.DataTypes.DATE,defaultValue:n.DataTypes.NOW},UserRegistrationID:{type:n.DataTypes.UUID,allowNull:!0,references:{model:"UserRegistration",key:"id"}}},{sequelize:e,modelName:"User",timestamps:!1,updatedAt:"updated_at"}),await e.sync().then((()=>{console.log("New User synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const o=a;r()}catch(e){r(e)}}),1)},80:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>E});var n=t(31),a=t(128),o=t(486),i=t.n(o),c=t(635),l=t(153),u=e([l]);l=(u.then?(await u)():u)[0];const d=(0,a.J)();class T extends n.Model{static async loginUser(e,s){return await this.findOne({where:{email:e,hashedpassword:s}})}static async logoutUser(e){return await this.findOne({where:{email:e}})}static async resetPassword(e,s){return await this.findOne({where:{email:e,hashedpassword:s}})}}T.init({id:{type:n.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},newUser:{type:n.DataTypes.STRING,allowNull:!1},username:{type:n.DataTypes.STRING,allowNull:!1},email:{type:n.DataTypes.STRING,allowNull:!1},hashedpassword:{type:n.DataTypes.STRING,allowNull:!1},createdAt:{type:n.DataTypes.DATE,allowNull:!1,defaultValue:n.DataTypes.NOW}},{sequelize:d,modelName:"UserRegistration",createdAt:"createdAt",timestamps:!1,freezeTableName:!0}),T.beforeCreate((async e=>{try{if(e){const s=i().genSaltSync(10),t=await i().hash(String(e.hashedpassword),s);e.hashedpassword=t}}catch(e){throw console.error("Error hashing password:",e),new Error("Error hashing password")}})),T.afterCreate((async e=>{try{if(e){const s=e.newUser?.lastIndexOf(" "),t=-1!==s?e.newUser?.slice(0,s):e.newUser,r=-1!==s?e.newUser?.slice(s??1):"",n=(0,c.q)(e.username);await l.A.upsert({firstName:t,lastName:r,username:e.username,email:e.email,hashedpassword:e.hashedpassword,status:"unverified",bio:"I am a new user.",join:new Date,avatarUrl:n,imageURL:null,profilePic:null,label:"New User",last_activity:new Date,updated_at:new Date,UserRegistrationID:e.id})}}catch(e){throw console.error("Error registering new user:",e),new Error("Error registering new user")}})),T.loginUser=async function(e,s){try{const t=await this.findOne({where:{email:e}});if(t){if(await i().compare(s,t.hashedpassword))return t;throw new Error("Incorrect password")}throw new Error("Incorrect email")}catch(e){throw console.error("Error logging in user:",e),new Error("User not found")}},T.logoutUser=async function(e){try{return await this.findOne({where:{email:e}})}catch(e){throw console.error("Error logging out user:",e),new Error("User not found")}},await d.sync().then((()=>{console.log("New User Registered synced successfully")})).catch((e=>{console.error("Error syncing new user:",e)}));const E=T;r()}catch(e){r(e)}}),1)},317:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>h});var n=t(252),a=t.n(n),o=t(577),i=t.n(o),c=t(976),l=t(24),u=t(268),d=t.n(u),T=t(898),E=t.n(T),_=e([l]);l=(_.then?(await _)():_)[0];const S=a().Router();S.use(i()(c.v)),S.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),S.use(d().urlencoded({extended:!0})),S.use(E()()),S.use(a().json()),S.use(d().json()),S.post("/api/register",l.TU),S.post("/api/login",l.pH),S.get("/api/logout",l.Ub),S.post("/api/refresh-token",l.Be),S.get("/api/currentUser",l.oC);const h=S;r()}catch(e){r(e)}}))},10:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>A});var n=t(818),a=t.n(n),o=t(252),i=t.n(o),c=t(577),l=t.n(c),u=t(153),d=t(268),T=t.n(d),E=t(898),_=t.n(E),S=t(51),h=t(829),p=t.n(h),g=t(101),R=e([u,S]);[u,S]=R.then?(await R)():R;const y=i().Router();a().config(),y.use(l()()),y.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),y.use(T().urlencoded({extended:!0})),y.use(_()()),y.use(i().json()),y.use(T().json()),y.get("/api/getUser",S.FH,(async(e,s,t)=>{const r=e.cookies.jwt;r?p().verify(r,g.n.JWT_SECRET,(async(e,r)=>{if(e)return console.log("JWT verification error",e.message),void s.status(401).json({message:"Unauthorized Invalid Token"});try{const e=await u.A.findByPk(r.id);if(!e)return void s.status(400).json({message:"User ID is required"});s.status(200).json({user:e})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}return t()})):s.status(401).json({message:"Unauthorized"})}));const A=y;r()}catch(e){r(e)}}))},388:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{Q:()=>S});var n=t(252),a=t.n(n),o=t(469),i=t(317),c=t(10),l=t(704),u=t(268),d=t.n(u),T=t(898),E=t.n(T),_=e([i,c,l]);[i,c,l]=_.then?(await _)():_;const S=a().Router();S.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),S.use(d().urlencoded({extended:!0})),S.use(E()()),S.use(a().json()),S.use(d().json()),S.get("/",((e,s)=>{s.send({status:`${o._.NODE_ENV}`,message:`${o._.RESPONSE_STATUS}`,name:`${o._.APP_NAME}`})})),S.use(i.A),S.use(l.A),S.use(c.A),r()}catch(e){r(e)}}))},704:(e,s,t)=>{t.a(e,(async(e,r)=>{try{t.d(s,{A:()=>S});var n=t(252),a=t.n(n),o=t(577),i=t.n(o),c=t(268),l=t.n(c),u=t(898),d=t.n(u),T=t(51),E=e([T]);T=(E.then?(await E)():E)[0];const _=a().Router();_.use(i()()),_.use(((e,s,t)=>{s.header("Access-Control-Allow-Origin","http://localhost:8080"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),s.header("Access-Control-Allow-Credentials","true"),t()})),_.use(l().urlencoded({extended:!0})),_.use(d()()),_.use(a().json()),_.use(l().json()),_.get("/api/getCurrentUser",T.HW,(async(e,s)=>{if(!s.locals.user)return s.status(401).json({message:"Unauthorized"});try{const e=s.locals.user;s.status(200).json({user:e})}catch(e){console.error("Error getting current user:",e),s.status(500).json({message:"Error getting current user"})}return s}));const S=_;r()}catch(e){r(e)}}))},635:(e,s,t)=>{function r(e){const s=e.split(" ").map((e=>e.charAt(0).toUpperCase())).join("");return`https://ui-avatars.com/api/?name=${encodeURIComponent(s)}&size=200&background=random&color=fff`}t.d(s,{q:()=>r}),t(982)},300:(e,s,t)=>{t.d(s,{H4:()=>c,sh:()=>d});var r=t(708),n=t.n(r),a=t(896),o=t.n(a),i=t(469);const c=(e,s)=>{console.error(e.message);let t={};e.message.includes("New User validation error")&&(t={name:"Name is required",username:"username is required",email:"email is required",password:"password is required"}),e.message.includes("UserRegistrations.email")&&(t.email="Email is already registered"),e.message.includes("incorrect email")&&(t.email="email is not registered"),e.message.includes("Incorrect password")&&(t.password="password is incorrect"),"SequelizeValidationError"===e.name&&e.error&&(t=e.error.reduce(((e,s)=>(e[s.path]=s.message,e)),{})),s.status(e.code||500).json({errors:t})};function l(e){const s=`${(new Date).toISOString()} - ${e.message}\n${e.stack}\n`;o().appendFileSync("error.log",s)}const u=new Map;function d(e,s,t,r){l(e),t.status(500).json({message:"An unexpected error occurred"}),r(e)}n().on("unhandledRejection",((e,s)=>{console.error("Unhandled Rejection at:",s,"reason:",e),u.set(s,e)})),n().on("rejectionHandled",(e=>{u.delete(e)})),n().on("unhandledRejection",((e,s)=>{l(e),console.error("Unhandled Rejection at:",s,"reason:",e),n().exit(1)})),n().on("uncaughtException",(e=>{l(e),console.error("Uncaught Exception:",e),n().exit(1)})),n().on("uncaughtException",(e=>{o().writeSync(n().stderr.fd,`Caught exception: ${e}\nException Origin: ${origin}\n`)})),setTimeout((()=>{console.log("This will still run.")}),i._.ERROR_TIMEOUT)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,