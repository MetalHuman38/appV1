"use strict";exports.id=439,exports.ids=[439],exports.modules={439:(e,t,s)=>{s.r(t),s.d(t,{default:()=>x});var a=s(252),o=s.n(a),r=s(577),n=s.n(r),_=s(469);const c={origin:_._.CORS_ORIGIN,methods:"GET,HEAD,PUT,PATCH,POST,DELETE, OPTIONS",credentials:!0,optionsSuccessStatus:_._.RESPONSE_CODE};var S=s(525),E=s.n(S),i=s(96),D=s.n(i),T=s(31),l=s(423),B=s(520),u=s(613);const C=(0,s(546).load)({DB_HOST:String,DB_PORT:Number,DB_USER:String,DB_PASS:String,DB_NAME:String,DB_SOCKET_PATH:String,DB_SOCKET_TIMEOUT:Number,DB_COMPRESS:Boolean,DB_DEBUG:Boolean,DB_PERMIT_LOCAL_INFILE:Boolean,DB_TRACE:Boolean,DB_CHECK_DUPLICATE:Boolean,DB_SSL:Boolean,DB_SSL_CA:String,DB_SSL_KEY:String,DB_SSL_CERT:String,DB_CONNECTION_ATTRIBUTES:String,DB_CONNECTION_TIMEOUT:Number}),{DB_HOST:O,DB_PORT:d,DB_USER:A,DB_PASS:N,DB_NAME:I,DB_SOCKET_PATH:L,DB_SOCKET_TIMEOUT:p,DB_COMPRESS:R,DB_DEBUG:g,DB_PERMIT_LOCAL_INFILE:P,DB_TRACE:b,DB_CHECK_DUPLICATE:h,DB_SSL:m,DB_SSL_CA:M,DB_SSL_KEY:y,DB_SSL_CERT:U,DB_CONNECTION_ATTRIBUTES:w,DB_CONNECTION_TIMEOUT:f}=C;u.strict.ok(O,"Database host should be present"),u.strict.ok(d,"Database port should be present"),u.strict.ok(A,"Database user should be present"),u.strict.ok(N,"Database password should be present"),u.strict.ok(I,"Database name should be present");const H={DB_HOST:O,DB_PORT:d,DB_USER:A,DB_PASS:N,DB_NAME:I,DB_SOCKET_PATH:L,DB_SOCKET_TIMEOUT:p,DB_COMPRESS:R,DB_DEBUG:g,DB_PERMIT_LOCAL_INFILE:P,DB_TRACE:b,DB_CHECK_DUPLICATE:h,DB_CONNECTION_ATTRIBUTES:w,DB_CONNECTION_TIMEOUT:f,DB_SSL:m,DB_SSL_CA:M,DB_SSL_KEY:y,DB_SSL_CERT:U};var K=s(24),k=s.n(K);const F={dialect:B.MariaDbDialect,host:H.DB_HOST||"localhost",username:H.DB_USER||"metalbrain",password:H.DB_PASS||"password",database:H.DB_NAME||"FindSomeOne",socketPath:H.DB_SOCKET_PATH||"/var/run/mysqld/mysqld.sock",socketTimeout:H.DB_SOCKET_TIMEOUT||1e3,compress:H.DB_COMPRESS||!1,debug:H.DB_DEBUG||!1,permitLocalInfile:H.DB_PERMIT_LOCAL_INFILE||!1,trace:H.DB_TRACE||!0,checkDuplicate:H.DB_CHECK_DUPLICATE||!1,connectAttributes:JSON.parse(H.DB_CONNECTION_ATTRIBUTES||"{}"),connectionTimeout:H.DB_CONNECTION_TIMEOUT||1e3,port:H.DB_PORT||3306,ssl:H.DB_SSL||!1,dialectOptions:{ssl:{ca:H.DB_SSL_CA?k().readFileSync(H.DB_SSL_CA).toString():"",key:H.DB_SSL_KEY?k().readFileSync(H.DB_SSL_KEY).toString():"",cert:H.DB_SSL_CERT?k().readFileSync(H.DB_SSL_CERT).toString():""}}};async function G(){const e=new l.Sequelize({dialect:F.dialect,host:F.host,user:F.username,password:F.password,database:F.database,socketPath:F.socketPath,socketTimeout:F.socketTimeout,compress:F.compress,debug:F.debug,permitLocalInfile:F.permitLocalInfile,trace:F.trace,showWarnings:F.debug,checkDuplicate:F.checkDuplicate,connectAttributes:F.connectAttributes,port:F.port,ssl:F.ssl,connectTimeout:F.connectionTimeout});let t=0;for(;t<10;)try{return await e.authenticate(),console.log("Database connection established, Starting Server....."),await e.sync({force:!1}),console.log("Drop and re-sync db."),e}catch(e){console.error("Database connection failed:",e),t++,await new Promise((e=>setTimeout(e,1e3)))}if(10===t)throw console.error("Max attempts reached, database connection failed"),new Error("Database connection failed");return e}const v=o().Router();async function x({app:e}){await G(),await async function({app:e}){return e.get("/status",((e,t)=>t.sendStatus(200).end())),e.get("/status",((e,t)=>t.sendStatus(200).end())),e.use(n()(c)),e.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","http://localhost:8080"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Headers","Content-Type"),t.header("Access-Control-Allow-Credentials","true"),s()})),e.use(o().json()),e.use(o().urlencoded({extended:!0})),e.enable("trust proxy"),e.use(E()({contentSecurityPolicy:!1})),e.use(D()(_._.MORGAN)),e.use(v),e}({app:e}),console.log("Express Intialized!")}v.use(n()(c)),v.get("/",((e,t)=>{t.send({status:`${_._.NODE_ENV}`,message:`${_._.RESPONSE_STATUS}`,name:`${_._.APP_NAME}`})})),v.get("/tables",(async(e,t)=>{try{const e=await async function(e){try{const t=await G(),s="\n      SELECT COLUMN_NAME\n      FROM INFORMATION_SCHEMA.COLUMNS\n      WHERE TABLE_NAME = :tableName\n    ",a=await t.query(s,{type:T.QueryTypes.SELECT,replacements:{tableName:e}});return console.log(`Columns fetched successfully for table ${e}:`,a),a.map((e=>e.COLUMN_NAME))}catch(t){throw new Error(`Error getting columns for table ${e}: ${t.message}`)}}("userRegistration");t.send({tables:e})}catch(e){console.error(e),t.status(500).send("Internal Server Error")}})),v.get("/data",(async(e,t)=>{try{const e=await async function(){try{const e=await G(),t="\n      SELECT * FROM userRegistration\n    ",s=await e.query(t,{type:T.QueryTypes.SELECT});return console.log("Data fetched successfully for userRegistration:",s),s}catch(e){throw new Error(`Error getting data for table userRegistrations: ${e.message}`)}}();t.send({data:e})}catch(e){console.error(e),t.status(500).send("Internal Server Error")}}))}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,